{"version":3,"sources":["context/grid/gridContext.js","context/grid/gridReducer.js","context/types.js","parameters.js","context/grid/GridState.js","PathfinderVisualizer/Vertex/Vertex.js","Components/Methods.js","PathfinderVisualizer/Initializers/GridInitializers.js","algorithms/dijkstra.js","PathfinderVisualizer/Visualizers/Visualize.js","PathfinderVisualizer/PathfinderVisualizer.jsx","PathfinderVisualizer/Initializers/GridReset.js","App.js","serviceWorker.js","index.js"],"names":["GridContext","createContext","state","action","type","grid","payload","start_vertex_row","start_vertex_col","finish_vertex_row","finish_vertex_col","mouseIsPressed","isDragging","original_row","original_col","translate_row","translate_col","last_translate_row","last_translate_col","distanceMethod","allowDiagonal","COLUMNS","window","innerWidth","GridState","props","initialState","useReducer","gridReducer","dispatch","Provider","value","setGrid","setStart","position","row","col","setFinish","setMouseIsPressed","pressed","setIsDragging","started_dragging","setOriginal","setTranslate","setLastTranslate","setDistanceMethod","method","setAllowDiagonal","diagonal","children","Vertex","isFinish","isStart","isWall","onMouseDown","onMouseEnter","onMouseUp","isVisited","isPath","onDragStart","onDragOver","onDrop","extraClassName","distance","draggable","id","className","DistancePicker","getDistanceMethod","chooseDiagonal","React","useState","selectedMethod","setSelectedMethod","handleDistanceMethod","event","target","checked","setChecked","style","marginTop","Radio","onChange","name","Checkbox","inputProps","createInitialGrid","start_finish","thisRow","push","createVertex","Infinity","previousVertex","createGridWithWalls","wallGrid","vertex","newVertex","updateGrid","getAllVertices","vertices","getTheClosestVerticesFirst","unvisitedVertices","sort","vertexA","vertexB","updateUnvisitedNeighbors","getUnvisitedNeighbors","hVDistance","dDistance","t","length","animateAlgorithm","visitedInOrder","backtrackedVertices","i","setTimeout","backtrackRoute","document","getElementById","disabled","animateShortestPath","PathfinderVisualizer","gridContext","useContext","useEffect","handleDrag","clearTheVisualOfVertex","thisVertex","visualizeAlgorithm","console","log","startVertex","finishVertex","start","finish","closestVertex","shift","dijkstra","currentVertex","unshift","onClick","resetGrid","map","row_index","key","vertex_index","handleMouseDown","handleMouseEnter","e","vertexData","JSON","stringify","dataTransfer","setData","handleDragStart","preventDefault","stopPropagation","handleDragOver","new_position","parse","getData","dragged_from_position","empty_vertex","swapVertices","clearData","handleDrop","onDrag","App","params","particlesjsconfig","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.70eb76b0.chunk.js","sourcesContent":["import { createContext } from \"react\";\n\nconst GridContext = createContext();\n\nexport default GridContext;\n","/**\n *\n * Deleted all the get actions, because triggering the data\n * does not happen in the reducer. Only setting the state values happen\n * in reducer.\n * State values can be retrieved inside the functional component itself.\n *\n */\n\nimport {\n  SET_GRID,\n  SET_STARTING_ROW,\n  SET_STARTING_COL,\n  SET_FINISH_ROW,\n  SET_FINISH_COL,\n  SET_MOUSE_IS_PRESSED,\n  IS_DRAGGING,\n  SET_ORIGINAL_ROW,\n  SET_ORIGINAL_COL,\n  SET_TRANSLATE_ROW,\n  SET_TRANSLATE_COL,\n  SET_LAST_TRANSLATE_ROW,\n  SET_LAST_TRANSLATE_COL,\n  SET_DISTANCE_METHOD,\n  SET_ALLOW_DIAGONAL\n} from \"../types.js\";\nimport { CardActions } from \"@material-ui/core\";\n\nexport default (state, action) => {\n  switch (action.type) {\n    case SET_GRID:\n      return { ...state, grid: action.payload };\n\n    case SET_STARTING_ROW:\n      return { ...state, start_vertex_row: action.payload };\n\n    case SET_STARTING_COL:\n      return { ...state, start_vertex_col: action.payload };\n\n    case SET_FINISH_ROW:\n      return { ...state, finish_vertex_row: action.payload };\n\n    case SET_FINISH_COL:\n      return { ...state, finish_vertex_col: action.payload };\n\n    case SET_MOUSE_IS_PRESSED:\n      return { ...state, mouseIsPressed: action.payload };\n    // related to dragging :\n    case IS_DRAGGING:\n      return { ...state, isDragging: action.payload };\n\n    case SET_ORIGINAL_ROW:\n      return { ...state, original_row: action.payload };\n\n    case SET_ORIGINAL_COL:\n      return { ...state, original_col: action.payload };\n\n    case SET_TRANSLATE_ROW:\n      return { ...state, translate_row: action.payload };\n\n    case SET_TRANSLATE_COL:\n      return { ...state, translate_col: action.payload };\n\n    case SET_LAST_TRANSLATE_ROW:\n      return { ...state, last_translate_row: action.payload };\n\n    case SET_LAST_TRANSLATE_COL:\n      return { ...state, last_translate_col: action.payload };\n\n    case SET_DISTANCE_METHOD:\n      return {\n        ...state,\n        distanceMethod: action.payload\n      };\n\n    case SET_ALLOW_DIAGONAL:\n      return {\n        ...state,\n        allowDiagonal: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n","export const SET_GRID = \"SET_GRID\";\nexport const SET_STARTING_ROW = \"SET_STARTING_ROW\";\nexport const SET_STARTING_COL = \"SET_STARTING_COL\";\nexport const SET_FINISH_ROW = \"SET_FINISH_ROW\";\nexport const SET_FINISH_COL = \"SET_FINISH_COL\";\n\nexport const SET_MOUSE_IS_PRESSED = \"SET_MOUSE_IS_PRESSED\";\n\nexport const IS_DRAGGING = \"IS_DRAGGING\";\n\nexport const SET_ORIGINAL_ROW = \"SET_ORIGINAL_ROW\";\nexport const SET_ORIGINAL_COL = \"SET_ORIGINAL_COL\";\n\nexport const SET_TRANSLATE_ROW = \"SET_TRANSLATE_ROW\";\nexport const SET_TRANSLATE_COL = \"SET_TRANSLATE_COL\";\n\nexport const SET_LAST_TRANSLATE_ROW = \"SET_LAST_TRANSLATE_ROW\";\nexport const SET_LAST_TRANSLATE_COL = \"SET_LAST_TRANSLATE_COL\";\nexport const SET_DISTANCE_METHOD = \"SET_DISTANCE_METHOD\";\nexport const SET_ALLOW_DIAGONAL = \"SET_ALLOW_DIAGONAL\";\n","export const ROWS = 27;\nexport const COLUMNS = window.innerWidth / 28;\nexport const FAST = 10;\nexport const MEDIUM = 40;\nexport const SLOW = 80;\nexport const speed = SLOW;\n\n// the following attributes will be dependent on the user\n// export const START_VERTEX_ROW_ = Math.floor(Math.random() * ROWS + 1);\n// export const START_VERTEX_COL_ = Math.floor(Math.random() * COLUMNS + 1);\n// export const FINISH_VERTEX_ROW_ = Math.floor(Math.random() * ROWS + 1);\n// export const FINISH_VERTEX_COL_ = Math.floor(Math.random() * COLUMNS + 1);\nexport const START_VERTEX_ROW_ = 3;\nexport const START_VERTEX_COL_ = 3;\nexport const FINISH_VERTEX_ROW_ = 6;\nexport const FINISH_VERTEX_COL_ = 6;\n","import React, { useReducer } from \"react\";\nimport gridContext from \"./gridContext\";\nimport gridReducer from \"./gridReducer\";\n\nimport {\n  START_VERTEX_ROW_,\n  START_VERTEX_COL_,\n  FINISH_VERTEX_ROW_,\n  FINISH_VERTEX_COL_\n} from \"../../parameters\";\n\nimport {\n  SET_GRID,\n  SET_STARTING_ROW,\n  SET_STARTING_COL,\n  SET_FINISH_ROW,\n  SET_FINISH_COL,\n  SET_MOUSE_IS_PRESSED,\n  IS_DRAGGING,\n  SET_ORIGINAL_ROW,\n  SET_ORIGINAL_COL,\n  SET_TRANSLATE_ROW,\n  SET_TRANSLATE_COL,\n  SET_LAST_TRANSLATE_ROW,\n  SET_LAST_TRANSLATE_COL,\n  SET_DISTANCE_METHOD,\n  SET_ALLOW_DIAGONAL\n} from \"../types.js\";\n\n/**\n * Need to update :\n * 1. Start/Finish\n * 2. Grid\n * 3. Grid with walls\n * 4. mouseIsPressed\n * 5. isDragging\n *\n */\nconst GridState = props => {\n  const initialState = {\n    grid: [],\n\n    mouseIsPressed: false,\n\n    start_vertex_row: START_VERTEX_ROW_,\n    start_vertex_col: START_VERTEX_COL_,\n    finish_vertex_row: FINISH_VERTEX_ROW_,\n    finish_vertex_col: FINISH_VERTEX_COL_,\n\n    isDragging: false,\n\n    original_row: 0,\n    original_col: 0,\n\n    translate_row: 0,\n    translate_col: 0,\n\n    last_translate_row: 0,\n    last_translate_col: 0,\n\n    distanceMethod: \"manhattan\",\n\n    allowDiagonal: false\n  };\n\n  const [state, dispatch] = useReducer(gridReducer, initialState);\n\n  const setGrid = grid => {\n    dispatch({ type: SET_GRID, payload: grid });\n  };\n\n  const setStart = position => {\n    dispatch({ type: SET_STARTING_ROW, payload: position.row });\n    dispatch({ type: SET_STARTING_COL, payload: position.col });\n  };\n\n  const setFinish = position => {\n    dispatch({ type: SET_FINISH_ROW, payload: position.row });\n    dispatch({ type: SET_FINISH_COL, payload: position.col });\n  };\n\n  const setMouseIsPressed = pressed => {\n    dispatch({ type: SET_MOUSE_IS_PRESSED, payload: pressed });\n  };\n\n  //   for dragging actions\n  const setIsDragging = started_dragging => {\n    dispatch({ type: IS_DRAGGING, payload: started_dragging });\n  };\n\n  const setOriginal = position => {\n    dispatch({ type: SET_ORIGINAL_ROW, payload: position.row });\n    dispatch({ type: SET_ORIGINAL_COL, payload: position.col });\n  };\n\n  const setTranslate = position => {\n    dispatch({ type: SET_TRANSLATE_ROW, payload: position.row });\n    dispatch({ type: SET_TRANSLATE_COL, payload: position.col });\n  };\n\n  const setLastTranslate = position => {\n    dispatch({ type: SET_LAST_TRANSLATE_ROW, payload: position.row });\n    dispatch({ type: SET_LAST_TRANSLATE_COL, payload: position.col });\n  };\n\n  const setDistanceMethod = method => {\n    dispatch({ type: SET_DISTANCE_METHOD, payload: method });\n  };\n\n  const setAllowDiagonal = diagonal => {\n    dispatch({ type: SET_ALLOW_DIAGONAL, payload: diagonal });\n  };\n\n  return (\n    <gridContext.Provider\n      value={{\n        grid: state.grid,\n        setGrid,\n        setStart,\n        setFinish,\n        setMouseIsPressed,\n        setIsDragging,\n        setOriginal,\n        setTranslate,\n        setLastTranslate,\n        mouseIsPressed: state.mouseIsPressed,\n        start_vertex_row: state.start_vertex_row,\n        start_vertex_col: state.start_vertex_col,\n        finish_vertex_row: state.finish_vertex_row,\n        finish_vertex_col: state.finish_vertex_col,\n        isDragging: state.isDragging,\n        original_row: state.original_row,\n        original_col: state.original_col,\n        translate_row: state.translate_row,\n        translate_col: state.translate_col,\n        last_translate_row: state.last_translate_row,\n        last_translate_col: state.last_translate_col,\n        setDistanceMethod,\n        distanceMethod: state.distanceMethod,\n        allowDiagonal: state.allowDiagonal,\n        setAllowDiagonal\n      }}\n    >\n      {props.children}\n    </gridContext.Provider>\n  );\n};\n/**\n * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n * this is where we return the state variables\n */\n\nexport default GridState;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./Vertex.css\";\n\nconst Vertex = props => {\n  const {\n    position,\n    isFinish,\n    isStart,\n    isWall,\n    onMouseDown,\n    onMouseEnter,\n    onMouseUp,\n    isVisited,\n    isPath,\n    onDragStart,\n    onDragOver,\n    onDrop,\n    distance,\n    draggable\n    // onDrag\n  } = props;\n  const extraClassName = isFinish\n    ? \"vertex-finish\"\n    : isStart\n    ? \"vertex-start\"\n    : isWall\n    ? \"vertex-wall vertex-non-draggable\"\n    : isPath\n    ? \"vertex-shortest-path vertex-non-draggable\"\n    : isVisited\n    ? \"vertex-visited vertex-non-draggable\"\n    : \"vertex-non-draggable\";\n\n  return (\n    <td\n      id={`vertex-${position.row}-${position.col}`}\n      className={`vertex ${extraClassName}`}\n      onMouseDown={() => onMouseDown(position)}\n      onMouseEnter={() => onMouseEnter(position)}\n      onMouseUp={() => onMouseUp(position)}\n      onDragStart={onDragStart}\n      onDragOver={onDragOver}\n      onDrop={onDrop}\n      draggable={(isStart || isFinish) && !isWall}\n    >\n      {/* {distance === Infinity ? \"I\" : distance} */}\n    </td>\n  );\n};\n\nVertex.propTypes = {\n  position: PropTypes.object,\n  isFinish: PropTypes.bool,\n  isStart: PropTypes.bool,\n  isWall: PropTypes.bool,\n  onMouseDown: PropTypes.func,\n  onMouseUp: PropTypes.func,\n  onMouseEnter: PropTypes.func,\n  mouseIsPressed: PropTypes.bool\n};\n\nexport default Vertex;\n","import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Radio from \"@material-ui/core/Radio\";\nimport RadioGroup from \"@material-ui/core/RadioGroup\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\n// // Horizontal and VerticalDistance\n// double hVDistance = 1.0;\n\n// // Diagonal Distance\n// double dDistance = 1.4;\n\n// /* for Manhattan Distances,\n// double horizontalVerticalDistance = 1.0;\n// double diagonalDistance = 2.0;\n\n// for Chebyshev Distances,\n// double horizontalVerticalDistance = 1.0;\n// double diagonalDistance = 1.0; */\n\nconst DistancePicker = ({ getDistanceMethod, chooseDiagonal }) => {\n  const [selectedMethod, setSelectedMethod] = React.useState(\"manhattan\");\n  const handleDistanceMethod = event => {\n    setSelectedMethod(event.target.value);\n    getDistanceMethod(selectedMethod);\n  };\n\n  const [checked, setChecked] = React.useState(true);\n  const handleDiagonal = event => {\n    setChecked(event.target.checked);\n    chooseDiagonal(!checked);\n  };\n  return (\n    <div style={{ marginTop: \"10px\" }}>\n      <Radio\n        checked={selectedMethod === \"manhattan\"}\n        onChange={handleDistanceMethod}\n        value=\"manhattan\"\n        name=\"choose-distance-method\"\n      />\n      <Radio\n        checked={selectedMethod === \"chebyshev\"}\n        onChange={handleDistanceMethod}\n        value=\"chebyshev\"\n        name=\"choose-distance-method\"\n      />\n      <Radio\n        checked={selectedMethod === \"euclidean\"}\n        onChange={handleDistanceMethod}\n        value=\"euclidean\"\n        name=\"choose-distance-method\"\n      />\n      <Checkbox\n        checked={checked}\n        onChange={handleDiagonal}\n        value=\"primary\"\n        inputProps={{ \"aria-label\": \"primary checkbox\" }}\n      />\n    </div>\n  );\n};\n\nexport default DistancePicker;\n","import { ROWS, COLUMNS } from \"../../parameters\";\n\nexport const createInitialGrid = start_finish => {\n  const grid = [];\n  for (let row = 0; row < ROWS; row++) {\n    const thisRow = [];\n    for (let col = 0; col < COLUMNS; col++) {\n      thisRow.push(createVertex({ row, col }, start_finish));\n    }\n    grid.push(thisRow);\n  }\n  return grid;\n};\n\nconst createVertex = (position, start_finish) => {\n  const {\n    start_vertex_row,\n    start_vertex_col,\n    finish_vertex_row,\n    finish_vertex_col\n  } = start_finish;\n  return {\n    position,\n    isStart:\n      position.row === start_vertex_row && position.col === start_vertex_col,\n    isFinish:\n      position.row === finish_vertex_row && position.col === finish_vertex_col,\n    distance: Infinity,\n    isVisited: false,\n    isWall: false,\n    isPath: false,\n    previousVertex: null,\n    draggable:\n      (position.row === start_vertex_row &&\n        position.col === start_vertex_col) ||\n      (position.row === finish_vertex_row && position.col === finish_vertex_col)\n  };\n};\n\nexport const createGridWithWalls = (grid, position) => {\n  const wallGrid = [...grid];\n  const vertex = wallGrid[position.row][position.col];\n  const newVertex = {\n    ...vertex,\n    isWall: !vertex.isWall, //changed here\n    isPath: false,\n    isVisited: false,\n    distance: Infinity,\n    draggable: false,\n    previousVertex: null\n  };\n  wallGrid[position.row][position.col] = newVertex;\n  return wallGrid;\n};\n\n//create a function for swapping a drid vertices\nexport const swapVertices = (grid, vertex, new_position) => {\n  const dragged_from_position = vertex.position;\n  // dropped at position\n  vertex.position = new_position;\n  grid[new_position.row][new_position.col] = vertex;\n  const empty_vertex = {\n    position: dragged_from_position,\n    isStart: false,\n    isFinish: false,\n    distance: Infinity,\n    isVisited: false,\n    isWall: false,\n    isPath: false,\n    previousVertex: null,\n    draggable: !vertex.draggable\n  };\n  grid[dragged_from_position.row][dragged_from_position.col] = empty_vertex;\n\n  vertex.distance = Infinity;\n  return grid;\n};\n\nexport const updateGrid = grid => {\n  for (let row = 0; row < ROWS; row++) {\n    for (let col = 0; col < COLUMNS; col++) {\n      //check the vertex\n      grid[row][col].distance = Infinity;\n      grid[row][col].isPath = false;\n      grid[row][col].isVisited = false;\n      grid[row][col].previousVertex = null;\n    }\n  }\n  return grid;\n};\n\n// need to handle move of the finish vertex\n// implement live update of the shortest path when either end or start\n// debug the walls placed after the move was done\n","/**\n *\n * This performs the Dijkstra algorithm returning all vertices that were\n * visited. Change the previousVertex value of the vertex to\n * backtrack from the finish vertex to the start vertex\n *\n */\nexport const dijkstra = (\n  grid,\n  start,\n  finish,\n  distanceMethod,\n  allowDiagonal\n) => {\n  const visitedInOrder = [];\n  // assign start vertex distance 0\n  // by default the vertices are infinite distance away from the start\n  start.distance = 0;\n  // get all vertices\n  const unvisitedVertices = getAllVertices(grid);\n  while (unvisitedVertices.length !== 0) {\n    getTheClosestVerticesFirst(unvisitedVertices);\n    const closestVertex = unvisitedVertices.shift();\n\n    if (closestVertex.isWall) continue;\n    if (closestVertex.distance === Infinity) return visitedInOrder;\n    updateUnvisitedNeighbors(\n      closestVertex,\n      grid,\n      distanceMethod,\n      allowDiagonal\n    );\n    closestVertex.isVisited = true;\n    visitedInOrder.push(closestVertex);\n    // before was like this :\n    // updateUnvisitedNeighbors(closestVertex, grid);\n\n    if (closestVertex === finish) return visitedInOrder;\n  }\n};\n\nconst getAllVertices = grid => {\n  const vertices = [];\n  for (const row of grid) for (const vertex of row) vertices.push(vertex);\n  return vertices;\n};\n\n// sort the vertices by ascending distance value\n// we can use PriorityQueue to improve on performance\nconst getTheClosestVerticesFirst = unvisitedVertices => {\n  unvisitedVertices.sort(\n    (vertexA, vertexB) => vertexA.distance - vertexB.distance\n  );\n};\n\nconst updateUnvisitedNeighbors = (\n  vertex,\n  grid,\n  distanceMethod,\n  allowDiagonal\n) => {\n  const unvisitedNeighbors = getUnvisitedNeighbors(\n    vertex,\n    grid,\n    distanceMethod,\n    allowDiagonal\n  );\n};\n\nconst getUnvisitedNeighbors = (vertex, grid, distanceMethod, allowDiagonal) => {\n  const { row, col } = vertex.position;\n  // this is the diagonal move\n  //   this method does not use neighbors array\n  //  write straight into the grid\n  if (allowDiagonal) {\n    let hVDistance, dDistance;\n    switch (distanceMethod) {\n      case \"manhattan\":\n        hVDistance = 1;\n        dDistance = 2;\n        break;\n      case \"euclidean\":\n        hVDistance = 1;\n        dDistance = 1.4;\n        break;\n      case \"chebyshev\":\n        hVDistance = 1;\n        dDistance = 1;\n        break;\n      default:\n        hVDistance = 1;\n        dDistance = 2;\n    }\n    // Top\n    let t;\n    if (row - 1 >= 0) {\n      // Top Top\n      t = grid[row - 1][col];\n      if (\n        !t.isVisited &&\n        !t.isWall &&\n        t.distance > vertex.distance + hVDistance\n      ) {\n        t.distance = vertex.distance + hVDistance;\n        t.previousVertex = vertex;\n      }\n\n      // Top Left\n      if (col - 1 > 0) {\n        t = grid[row - 1][col - 1];\n        if (\n          !t.isVisited &&\n          !t.isWall &&\n          t.distance > vertex.distance + dDistance\n        ) {\n          t.distance = vertex.distance + dDistance;\n          t.previousVertex = vertex;\n        }\n      }\n\n      // Top Right\n      if (col + 1 < grid[0].length) {\n        t = grid[row - 1][col + 1];\n        if (\n          !t.isVisited &&\n          !t.isWall &&\n          t.distance > vertex.distance + dDistance\n        ) {\n          t.distance = vertex.distance + dDistance;\n          t.previousVertex = vertex;\n        }\n      }\n    }\n\n    // Left\n    if (col - 1 > 0) {\n      t = grid[row][col - 1];\n      if (\n        !t.isVisited &&\n        !t.isWall &&\n        t.distance > vertex.distance + hVDistance\n      ) {\n        t.distance = vertex.distance + hVDistance;\n        t.previousVertex = vertex;\n      }\n    }\n\n    // Right\n    if (col + 1 < grid[0].length) {\n      t = grid[row][col + 1];\n      if (\n        !t.isVisited &&\n        !t.isWall &&\n        t.distance > vertex.distance + hVDistance\n      ) {\n        t.distance = vertex.distance + hVDistance;\n        t.previousVertex = vertex;\n      }\n    }\n    // Down\n    if (row + 1 < grid.length) {\n      // Down Down\n      t = grid[row + 1][col];\n      if (\n        !t.isVisited &&\n        !t.isWall &&\n        t.distance > vertex.distance + hVDistance\n      ) {\n        t.distance = vertex.distance + hVDistance;\n        t.previousVertex = vertex;\n      }\n\n      // Down Left\n      if (col - 1 >= 0) {\n        t = grid[row + 1][col - 1];\n        if (\n          !t.isVisited &&\n          !t.isWall &&\n          t.distance > vertex.distance + dDistance\n        ) {\n          t.distance = vertex.distance + dDistance;\n          t.previousVertex = vertex;\n        }\n      }\n\n      // Down Right\n      if (col + 1 < grid[0].length) {\n        t = grid[row + 1][col + 1];\n        if (\n          !t.isVisited &&\n          !t.isWall &&\n          t.distance > vertex.distance + dDistance\n        ) {\n          t.distance = vertex.distance + dDistance;\n          t.previousVertex = vertex;\n        }\n      }\n    }\n  } else {\n    //   adjust this logic\n    // give the user an option of travelling diagonally or not\n    // this is not the diagonal move\n    if (\n      row > 0 &&\n      !grid[row - 1][col].isVisited &&\n      !grid[row - 1][col].isWall\n    ) {\n      grid[row - 1][col].distance = vertex.distance + 1;\n      grid[row - 1][col].previousVertex = vertex;\n    }\n    if (\n      col < grid[0].length - 1 &&\n      !grid[row][col + 1].isVisited &&\n      !grid[row][col + 1].isWall\n    ) {\n      grid[row][col + 1].distance = vertex.distance + 1;\n      grid[row][col + 1].previousVertex = vertex;\n    }\n    if (\n      row < grid.length - 1 &&\n      !grid[row + 1][col].isVisited &&\n      !grid[row + 1][col].isWall\n    ) {\n      grid[row + 1][col].distance = vertex.distance + 1;\n      grid[row + 1][col].previousVertex = vertex;\n    }\n    if (\n      col > 0 &&\n      !grid[row][col - 1].isVisited &&\n      !grid[row][col - 1].isWall\n    ) {\n      grid[row][col - 1].distance = vertex.distance + 1;\n      grid[row][col - 1].previousVertex = vertex;\n    }\n  }\n};\n\nexport const backtrackRoute = (finish, start) => {\n  const backtrackedVertices = [];\n  let currentVertex = finish;\n  currentVertex = currentVertex.previousVertex;\n  if (currentVertex === null) return backtrackedVertices;\n  while (currentVertex !== start) {\n    currentVertex.isPath = true;\n    backtrackedVertices.unshift(currentVertex);\n    currentVertex = currentVertex.previousVertex;\n  }\n  return backtrackedVertices;\n};\n","export const animateShortestPath = backtrackRoute => {\n  for (let i = 0; i < backtrackRoute.length; i++) {\n    setTimeout(() => {\n      const vertex = backtrackRoute[i];\n      document.getElementById(\n        `vertex-${vertex.position.row}-${vertex.position.col}`\n      ).className = \"vertex vertex-shortest-path\";\n    }, 40 * i);\n  }\n  document.getElementById(\"btnStart\").disabled = false;\n  document.getElementById(\"btnReset\").disabled = false;\n};\n\nexport const animateAlgorithm = (visitedInOrder, backtrackedVertices) => {\n  for (let i = 0; i <= visitedInOrder.length; i++) {\n    if (i === visitedInOrder.length) {\n      setTimeout(() => {\n        animateShortestPath(backtrackedVertices);\n      }, 40 * i);\n      return;\n    }\n    setTimeout(() => {\n      const row = visitedInOrder[i].position.row;\n      const col = visitedInOrder[i].position.col;\n      const isStart = visitedInOrder[i].isStart;\n      const isFinish = visitedInOrder[i].isFinish;\n\n      if (!(isStart || isFinish))\n        document.getElementById(`vertex-${row}-${col}`).className =\n          \"vertex vertex-visited\";\n    }, 40 * i);\n  }\n};\n","import React, { useEffect, useContext, useState, useRef } from \"react\";\nimport GridContext from \"../context/grid/gridContext\";\nimport \"./PathfinderVisualizer.css\";\nimport Vertex from \"./Vertex/Vertex\";\nimport DistancePicker from \"../Components/Methods\";\n\nimport {\n  createInitialGrid,\n  createGridWithWalls,\n  swapVertices,\n  updateGrid\n} from \"./Initializers/GridInitializers\";\nimport { dijkstra, backtrackRoute } from \"../algorithms/dijkstra\";\nimport { resetGrid } from \"../PathfinderVisualizer/Initializers/GridReset\";\nimport { animateAlgorithm } from \"./Visualizers/Visualize\";\n\nimport { ROWS, COLUMNS } from \"../parameters\";\n\nconst PathfinderVisualizer = () => {\n  const gridContext = useContext(GridContext);\n\n  const {\n    grid,\n    setGrid,\n    setMouseIsPressed,\n    start_vertex_row,\n    start_vertex_col,\n    finish_vertex_row,\n    finish_vertex_col,\n    mouseIsPressed,\n    setStart,\n    setFinish,\n    setDistanceMethod,\n    distanceMethod,\n    allowDiagonal,\n    setAllowDiagonal\n  } = gridContext;\n\n  const start_finish = {\n    start_vertex_row,\n    start_vertex_col,\n    finish_vertex_row,\n    finish_vertex_col\n  };\n\n  useEffect(() => {\n    // eslint-disable-next-line\n    setGrid(createInitialGrid(start_finish));\n  }, []);\n\n  const handleDragStart = (event, position, vertex) => {\n    const { row, col } = position;\n\n    if (\n      !(row === start_vertex_row && col === start_vertex_col) &&\n      !(row === finish_vertex_row && col === finish_vertex_col)\n    ) {\n      return;\n    } else {\n      const vertexData = JSON.stringify(vertex);\n      event.dataTransfer.setData(\"vertex_data\", vertexData);\n    }\n\n    return;\n  };\n  const handleDragOver = (event, position) => {\n    event.preventDefault();\n    event.stopPropagation();\n  };\n\n  const handleDrop = (event, new_position) => {\n    const vertex = JSON.parse(event.dataTransfer.getData(\"vertex_data\"));\n    if (vertex.isStart || vertex.isFinish) {\n      if (\n        (new_position.row === finish_vertex_row &&\n          new_position.col === finish_vertex_col) ||\n        (new_position.row === start_vertex_row &&\n          new_position.col === start_vertex_col)\n      )\n        return;\n    }\n    // reassign the start or finish vertex depending on the vertex.isFinish \\\\ vertex.isStart\n    if (vertex.isStart) {\n      setStart(new_position);\n    } else {\n      setFinish(new_position);\n    }\n    setGrid(swapVertices(grid, vertex, new_position));\n    setGrid(updateGrid(grid));\n    clearTheVisualOfVertex();\n    event.dataTransfer.clearData();\n  };\n\n  const handleDrag = position => {\n    return;\n  };\n\n  const clearTheVisualOfVertex = () => {\n    for (let row = 0; row < ROWS; row++) {\n      for (let col = 0; col < COLUMNS; col++) {\n        let thisVertex = grid[row][col];\n        if (thisVertex.isStart)\n          document.getElementById(`vertex-${row}-${col}`).className =\n            \"vertex vertex-start\";\n        else if (thisVertex.isFinish)\n          document.getElementById(`vertex-${row}-${col}`).className =\n            \"vertex vertex-finish\";\n        else if (thisVertex.isWall)\n          document.getElementById(`vertex-${row}-${col}`).className =\n            \"vertex vertex-wall vertex-non-draggable\";\n        else {\n          document.getElementById(`vertex-${row}-${col}`).className = \"vertex \";\n        }\n      }\n    }\n  };\n\n  const handleMouseDown = position => {\n    const { row, col } = position;\n\n    if (!grid[row][col].isStart && !grid[row][col].isFinish) {\n      const wallGrid = createGridWithWalls(grid, position);\n      setGrid(wallGrid);\n      updateGrid(wallGrid);\n      setMouseIsPressed(true);\n      clearTheVisualOfVertex();\n    }\n  };\n\n  const handleMouseEnter = position => {\n    const { row, col } = position;\n    if (!mouseIsPressed) return;\n    if (!grid[row][col].isStart && !grid[row][col].isFinish) {\n      const wallGrid = createGridWithWalls(grid, position);\n      setGrid(wallGrid);\n      updateGrid(wallGrid);\n      clearTheVisualOfVertex();\n    }\n  };\n  const handleMouseUp = position => {\n    setMouseIsPressed(false);\n  };\n\n  const visualizeAlgorithm = () => {\n    // call the function to partially reset the grid\n    // keeping the walls and start/finish points\n\n    document.getElementById(\"btnStart\").disabled = true;\n    document.getElementById(\"btnReset\").disabled = true;\n    console.log(distanceMethod);\n    for (let row = 0; row < ROWS; row++) {\n      for (let col = 0; col < COLUMNS; col++) {\n        let thisVertex = grid[row][col];\n\n        if (thisVertex.isStart)\n          document.getElementById(`vertex-${row}-${col}`).className =\n            \"vertex vertex-start\";\n        else if (thisVertex.isFinish)\n          document.getElementById(`vertex-${row}-${col}`).className =\n            \"vertex vertex-finish\";\n        else if (thisVertex.isWall)\n          document.getElementById(`vertex-${row}-${col}`).className =\n            \"vertex vertex-wall\";\n        else if (thisVertex.isVisited)\n          document.getElementById(`vertex-${row}-${col}`).className = \"vertex\";\n      }\n    }\n    const startVertex = grid[start_vertex_row][start_vertex_col];\n    const finishVertex = grid[finish_vertex_row][finish_vertex_col];\n    console.log(allowDiagonal);\n    const visitedInOrder = dijkstra(\n      grid,\n      startVertex,\n      finishVertex,\n      distanceMethod,\n      allowDiagonal\n    );\n    const backtrackedVertices = backtrackRoute(finishVertex, startVertex);\n    animateAlgorithm(visitedInOrder, backtrackedVertices);\n  };\n\n  const chooseDiagonalMethod = event => {\n    setGrid(updateGrid(grid));\n    clearTheVisualOfVertex();\n    setAllowDiagonal(event);\n  };\n\n  const chooseDistanceMethod = event => {\n    setDistanceMethod(event);\n  };\n\n  return (\n    <>\n      <div>\n        {\" \"}\n        <button\n          id=\"btnStart\"\n          //   className=\"btn\"\n          onClick={() => visualizeAlgorithm()}\n        >\n          Start\n        </button>\n        <button\n          id=\"btnReset\"\n          //   className=\"btn\"\n          onClick={() => resetGrid(grid, setGrid, start_finish)}\n        >\n          Reset Grid\n        </button>\n      </div>\n      <DistancePicker\n        getDistanceMethod={chooseDistanceMethod}\n        chooseDiagonal={chooseDiagonalMethod}\n      />\n      <table className=\"grid\" draggable=\"false\">\n        <tbody className=\"grid\" draggable=\"false\">\n          {grid.map((row, row_index) => {\n            return (\n              <tr className=\"row\" key={row_index}>\n                {row.map((vertex, vertex_index) => {\n                  const {\n                    position,\n                    isFinish,\n                    isStart,\n                    isWall,\n                    isVisited,\n                    isPath,\n                    distance\n                  } = vertex;\n                  return (\n                    <Vertex\n                      key={vertex_index}\n                      position={position}\n                      isFinish={isFinish}\n                      isStart={isStart}\n                      onMouseDown={position => handleMouseDown(position)}\n                      onMouseEnter={position => handleMouseEnter(position)}\n                      onMouseUp={position => handleMouseUp(position)}\n                      onDragStart={e => handleDragStart(e, position, vertex)}\n                      onDragOver={event => handleDragOver(event, position)}\n                      onDrop={event => handleDrop(event, position)}\n                      onDrag={handleDrag}\n                      mouseIsPressed={mouseIsPressed}\n                      isWall={isWall}\n                      distance={distance}\n                      isVisited={isVisited}\n                      isPath={isPath}\n                      draggable={(isStart || isFinish) && !isWall}\n                    ></Vertex>\n                  );\n                })}\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </>\n  );\n};\n\nexport default PathfinderVisualizer;\n","import { createInitialGrid } from \"../Initializers/GridInitializers\";\nimport { ROWS, COLUMNS } from \"../../parameters\";\n\nexport const resetGrid = (grid, setGrid, start_finish) => {\n  const resetGrid = createInitialGrid(start_finish);\n  setGrid(resetGrid);\n  for (let row = 0; row < ROWS; row++) {\n    for (let col = 0; col < COLUMNS; col++) {\n      let thisVertex = grid[row][col];\n      if (thisVertex.isStart)\n        document.getElementById(`vertex-${row}-${col}`).className =\n          \"vertex vertex-start\";\n      else if (thisVertex.isFinish)\n        document.getElementById(`vertex-${row}-${col}`).className =\n          \"vertex vertex-finish\";\n      else {\n        document.getElementById(`vertex-${row}-${col}`).className = \"vertex \";\n      }\n    }\n  }\n};\n","import React from \"react\";\nimport \"./App.css\";\nimport GridState from \"./context/grid/GridState\";\nimport PathfinderVisualizer from \"./PathfinderVisualizer/PathfinderVisualizer\";\nimport Particles from \"react-particles-js\";\nimport particlesjsconfig from \"./utilities/particlesjs-config.json\";\n\nfunction App() {\n  return (\n    <GridState>\n      <div className=\"App\" draggable=\"false\">\n        <h1>Pathfinder visualization</h1>\n        <PathfinderVisualizer />\n      </div>\n      <Particles className=\"particles\" params={particlesjsconfig} />\n    </GridState>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}