{"version":3,"sources":["context/grid/gridContext.js","context/grid/gridReducer.js","context/types.js","parameters.js","context/grid/GridState.js","PathfinderVisualizer/Vertex/Vertex.js","Components/Methods.js","PathfinderVisualizer/Initializers/GridInitializers.js","algorithms/dijkstra.js","algorithms/astar.js","PathfinderVisualizer/Visualizers/Visualize.js","PathfinderVisualizer/PathfinderVisualizer.jsx","PathfinderVisualizer/Initializers/GridReset.js","App.js","serviceWorker.js","index.js"],"names":["GridContext","createContext","state","action","type","grid","payload","start_vertex_row","start_vertex_col","finish_vertex_row","finish_vertex_col","mouseIsPressed","isDragging","original_row","original_col","translate_row","translate_col","last_translate_row","last_translate_col","distanceMethod","allowDiagonal","algorithm","COLUMNS","window","innerWidth","GridState","props","initialState","useReducer","gridReducer","dispatch","Provider","value","setGrid","setStart","position","row","col","setFinish","setMouseIsPressed","pressed","setIsDragging","started_dragging","setOriginal","setTranslate","setLastTranslate","setDistanceMethod","method","setAllowDiagonal","diagonal","setAlgorithm","children","Vertex","isFinish","isStart","isWall","onMouseDown","onMouseEnter","onMouseUp","isVisited","isPath","onDragStart","onDragOver","onDrop","distance","extraClassName","id","className","draggable","Infinity","DistancePicker","getDistanceMethod","chooseDiagonal","getWhichAlgorithm","gridContext","React","useContext","handleDistanceMethod","event","target","handleAlgorithMethod","style","display","marginTop","textAlign","FormGroup","FormControlLabel","control","Radio","checked","onChange","name","label","disabled","Checkbox","createInitialGrid","start_finish","thisRow","push","createVertex","distanceToThis","heuristic","previousVertex","createGridWithWalls","wallGrid","vertex","newVertex","updateGrid","getAllVertices","vertices","getTheClosestVerticesFirst","unvisitedVertices","sort","vertexA","vertexB","updateUnvisitedNeighbors","getUnvisitedNeighbors","hVDistance","dDistance","t","length","finish","calculateHeuristic","from","to","Math","abs","animateAlgorithm","visitedInOrder","backtrackedVertices","i","setTimeout","backtrackRoute","document","getElementById","animateShortestPath","PathfinderVisualizer","useEffect","handleDrag","clearTheVisualOfVertex","thisVertex","visualizeAlgorithm","startVertex","finishVertex","console","log","start","closestVertex","shift","astar","dijkstra","currentVertex","unshift","onClick","resetGrid","map","row_index","key","vertex_index","handleMouseDown","handleMouseEnter","e","vertexData","JSON","stringify","dataTransfer","setData","handleDragStart","preventDefault","stopPropagation","handleDragOver","new_position","parse","getData","dragged_from_position","empty_vertex","swapVertices","clearData","handleDrop","onDrag","App","params","particlesjsconfig","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7ba11bce.chunk.js","sourcesContent":["import { createContext } from \"react\";\n\nconst GridContext = createContext();\n\nexport default GridContext;\n","/**\n *\n * Deleted all the get actions, because triggering the data\n * does not happen in the reducer. Only setting the state values happen\n * in reducer.\n * State values can be retrieved inside the functional component itself.\n *\n */\n\nimport {\n  SET_GRID,\n  SET_STARTING_ROW,\n  SET_STARTING_COL,\n  SET_FINISH_ROW,\n  SET_FINISH_COL,\n  SET_MOUSE_IS_PRESSED,\n  IS_DRAGGING,\n  SET_ORIGINAL_ROW,\n  SET_ORIGINAL_COL,\n  SET_TRANSLATE_ROW,\n  SET_TRANSLATE_COL,\n  SET_LAST_TRANSLATE_ROW,\n  SET_LAST_TRANSLATE_COL,\n  SET_DISTANCE_METHOD,\n  SET_ALLOW_DIAGONAL,\n  SET_ALGORITHM\n} from \"../types.js\";\n\nexport default (state, action) => {\n  switch (action.type) {\n    case SET_GRID:\n      return { ...state, grid: action.payload };\n\n    case SET_STARTING_ROW:\n      return { ...state, start_vertex_row: action.payload };\n\n    case SET_STARTING_COL:\n      return { ...state, start_vertex_col: action.payload };\n\n    case SET_FINISH_ROW:\n      return { ...state, finish_vertex_row: action.payload };\n\n    case SET_FINISH_COL:\n      return { ...state, finish_vertex_col: action.payload };\n\n    case SET_MOUSE_IS_PRESSED:\n      return { ...state, mouseIsPressed: action.payload };\n    // related to dragging :\n    case IS_DRAGGING:\n      return { ...state, isDragging: action.payload };\n\n    case SET_ORIGINAL_ROW:\n      return { ...state, original_row: action.payload };\n\n    case SET_ORIGINAL_COL:\n      return { ...state, original_col: action.payload };\n\n    case SET_TRANSLATE_ROW:\n      return { ...state, translate_row: action.payload };\n\n    case SET_TRANSLATE_COL:\n      return { ...state, translate_col: action.payload };\n\n    case SET_LAST_TRANSLATE_ROW:\n      return { ...state, last_translate_row: action.payload };\n\n    case SET_LAST_TRANSLATE_COL:\n      return { ...state, last_translate_col: action.payload };\n\n    case SET_DISTANCE_METHOD:\n      return {\n        ...state,\n        distanceMethod: action.payload\n      };\n\n    case SET_ALLOW_DIAGONAL:\n      return {\n        ...state,\n        allowDiagonal: action.payload\n      };\n\n    case SET_ALGORITHM:\n      return {\n        ...state,\n        algorithm: action.payload\n      };\n\n    default:\n      return state;\n  }\n};\n","export const SET_GRID = \"SET_GRID\";\nexport const SET_STARTING_ROW = \"SET_STARTING_ROW\";\nexport const SET_STARTING_COL = \"SET_STARTING_COL\";\nexport const SET_FINISH_ROW = \"SET_FINISH_ROW\";\nexport const SET_FINISH_COL = \"SET_FINISH_COL\";\n\nexport const SET_MOUSE_IS_PRESSED = \"SET_MOUSE_IS_PRESSED\";\n\nexport const IS_DRAGGING = \"IS_DRAGGING\";\n\nexport const SET_ORIGINAL_ROW = \"SET_ORIGINAL_ROW\";\nexport const SET_ORIGINAL_COL = \"SET_ORIGINAL_COL\";\n\nexport const SET_TRANSLATE_ROW = \"SET_TRANSLATE_ROW\";\nexport const SET_TRANSLATE_COL = \"SET_TRANSLATE_COL\";\n\nexport const SET_LAST_TRANSLATE_ROW = \"SET_LAST_TRANSLATE_ROW\";\nexport const SET_LAST_TRANSLATE_COL = \"SET_LAST_TRANSLATE_COL\";\nexport const SET_DISTANCE_METHOD = \"SET_DISTANCE_METHOD\";\nexport const SET_ALLOW_DIAGONAL = \"SET_ALLOW_DIAGONAL\";\n\nexport const SET_ALGORITHM = \"SET_ALGORITHM\";\n","export const ROWS = 27;\nexport const COLUMNS = window.innerWidth / 28;\nexport const FAST = 10;\nexport const MEDIUM = 40;\nexport const SLOW = 80;\nexport const speed = SLOW;\n\n// the following attributes will be dependent on the user\n// export const START_VERTEX_ROW_ = Math.floor(Math.random() * ROWS + 1);\n// export const START_VERTEX_COL_ = Math.floor(Math.random() * COLUMNS + 1);\n// export const FINISH_VERTEX_ROW_ = Math.floor(Math.random() * ROWS + 1);\n// export const FINISH_VERTEX_COL_ = Math.floor(Math.random() * COLUMNS + 1);\nexport const START_VERTEX_ROW_ = 3;\nexport const START_VERTEX_COL_ = 3;\nexport const FINISH_VERTEX_ROW_ = 6;\nexport const FINISH_VERTEX_COL_ = 6;\n","import React, { useReducer } from \"react\";\nimport gridContext from \"./gridContext\";\nimport gridReducer from \"./gridReducer\";\n\nimport {\n  START_VERTEX_ROW_,\n  START_VERTEX_COL_,\n  FINISH_VERTEX_ROW_,\n  FINISH_VERTEX_COL_\n} from \"../../parameters\";\n\nimport {\n  SET_GRID,\n  SET_STARTING_ROW,\n  SET_STARTING_COL,\n  SET_FINISH_ROW,\n  SET_FINISH_COL,\n  SET_MOUSE_IS_PRESSED,\n  IS_DRAGGING,\n  SET_ORIGINAL_ROW,\n  SET_ORIGINAL_COL,\n  SET_TRANSLATE_ROW,\n  SET_TRANSLATE_COL,\n  SET_LAST_TRANSLATE_ROW,\n  SET_LAST_TRANSLATE_COL,\n  SET_DISTANCE_METHOD,\n  SET_ALLOW_DIAGONAL,\n  SET_ALGORITHM\n} from \"../types.js\";\n\n/**\n * Need to update :\n * 1. Start/Finish\n * 2. Grid\n * 3. Grid with walls\n * 4. mouseIsPressed\n * 5. isDragging\n *\n */\nconst GridState = props => {\n  const initialState = {\n    grid: [],\n\n    mouseIsPressed: false,\n\n    start_vertex_row: START_VERTEX_ROW_,\n    start_vertex_col: START_VERTEX_COL_,\n    finish_vertex_row: FINISH_VERTEX_ROW_,\n    finish_vertex_col: FINISH_VERTEX_COL_,\n\n    isDragging: false,\n\n    original_row: 0,\n    original_col: 0,\n\n    translate_row: 0,\n    translate_col: 0,\n\n    last_translate_row: 0,\n    last_translate_col: 0,\n\n    distanceMethod: \"manhattan\",\n\n    allowDiagonal: false,\n\n    algorithm: \"dijkstra\"\n  };\n\n  const [state, dispatch] = useReducer(gridReducer, initialState);\n\n  const setGrid = grid => {\n    dispatch({ type: SET_GRID, payload: grid });\n  };\n\n  const setStart = position => {\n    dispatch({ type: SET_STARTING_ROW, payload: position.row });\n    dispatch({ type: SET_STARTING_COL, payload: position.col });\n  };\n\n  const setFinish = position => {\n    dispatch({ type: SET_FINISH_ROW, payload: position.row });\n    dispatch({ type: SET_FINISH_COL, payload: position.col });\n  };\n\n  const setMouseIsPressed = pressed => {\n    dispatch({ type: SET_MOUSE_IS_PRESSED, payload: pressed });\n  };\n\n  //   for dragging actions\n  const setIsDragging = started_dragging => {\n    dispatch({ type: IS_DRAGGING, payload: started_dragging });\n  };\n\n  const setOriginal = position => {\n    dispatch({ type: SET_ORIGINAL_ROW, payload: position.row });\n    dispatch({ type: SET_ORIGINAL_COL, payload: position.col });\n  };\n\n  const setTranslate = position => {\n    dispatch({ type: SET_TRANSLATE_ROW, payload: position.row });\n    dispatch({ type: SET_TRANSLATE_COL, payload: position.col });\n  };\n\n  const setLastTranslate = position => {\n    dispatch({ type: SET_LAST_TRANSLATE_ROW, payload: position.row });\n    dispatch({ type: SET_LAST_TRANSLATE_COL, payload: position.col });\n  };\n\n  const setDistanceMethod = method => {\n    dispatch({ type: SET_DISTANCE_METHOD, payload: method });\n  };\n\n  const setAllowDiagonal = diagonal => {\n    dispatch({ type: SET_ALLOW_DIAGONAL, payload: diagonal });\n  };\n\n  const setAlgorithm = algorithm => {\n    dispatch({ type: SET_ALGORITHM, payload: algorithm });\n  };\n  return (\n    <gridContext.Provider\n      value={{\n        grid: state.grid,\n        setGrid,\n        setStart,\n        setFinish,\n        setMouseIsPressed,\n        setIsDragging,\n        setOriginal,\n        setTranslate,\n        setLastTranslate,\n        mouseIsPressed: state.mouseIsPressed,\n        start_vertex_row: state.start_vertex_row,\n        start_vertex_col: state.start_vertex_col,\n        finish_vertex_row: state.finish_vertex_row,\n        finish_vertex_col: state.finish_vertex_col,\n        isDragging: state.isDragging,\n        original_row: state.original_row,\n        original_col: state.original_col,\n        translate_row: state.translate_row,\n        translate_col: state.translate_col,\n        last_translate_row: state.last_translate_row,\n        last_translate_col: state.last_translate_col,\n        setDistanceMethod,\n        distanceMethod: state.distanceMethod,\n        allowDiagonal: state.allowDiagonal,\n        setAllowDiagonal,\n        setAlgorithm,\n        algorithm: state.algorithm\n      }}\n    >\n      {props.children}\n    </gridContext.Provider>\n  );\n};\n/**\n * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n * this is where we return the state variables\n */\n\nexport default GridState;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./Vertex.css\";\n\nconst Vertex = props => {\n  const {\n    position,\n    isFinish,\n    isStart,\n    isWall,\n    onMouseDown,\n    onMouseEnter,\n    onMouseUp,\n    isVisited,\n    isPath,\n    onDragStart,\n    onDragOver,\n    onDrop,\n    distance\n  } = props;\n  const extraClassName = isFinish\n    ? \"vertex-finish\"\n    : isStart\n    ? \"vertex-start\"\n    : isWall\n    ? \"vertex-wall vertex-non-draggable\"\n    : isPath\n    ? \"vertex-shortest-path vertex-non-draggable\"\n    : isVisited\n    ? \"vertex-visited vertex-non-draggable\"\n    : \"vertex-non-draggable\";\n\n  return (\n    <td\n      id={`vertex-${position.row}-${position.col}`}\n      className={`vertex ${extraClassName}`}\n      onMouseDown={() => onMouseDown(position)}\n      onMouseEnter={() => onMouseEnter(position)}\n      onMouseUp={() => onMouseUp(position)}\n      onDragStart={onDragStart}\n      onDragOver={onDragOver}\n      onDrop={onDrop}\n      draggable={(isStart || isFinish) && !isWall}\n    >\n      {distance === Infinity ? \"I\" : distance}\n    </td>\n  );\n};\n\nVertex.propTypes = {\n  position: PropTypes.object,\n  isFinish: PropTypes.bool,\n  isStart: PropTypes.bool,\n  isWall: PropTypes.bool,\n  onMouseDown: PropTypes.func,\n  onMouseUp: PropTypes.func,\n  onMouseEnter: PropTypes.func,\n  mouseIsPressed: PropTypes.bool\n};\n\nexport default Vertex;\n","import React from \"react\";\nimport Radio from \"@material-ui/core/Radio\";\nimport Checkbox from \"@material-ui/core/Checkbox\";\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\nimport FormGroup from \"@material-ui/core/FormGroup\";\n\nimport GridContext from \"../context/grid/gridContext\";\nimport { FormControl } from \"@material-ui/core\";\n\nconst DistancePicker = ({\n  getDistanceMethod,\n  chooseDiagonal,\n  getWhichAlgorithm\n}) => {\n  const gridContext = React.useContext(GridContext);\n  const {\n    allowDiagonal,\n    distanceMethod,\n    setAllowDiagonal,\n    setDistanceMethod,\n    setAlgorithm,\n    algorithm\n  } = gridContext;\n\n  const handleDistanceMethod = event => {\n    setDistanceMethod(event.target.value);\n    getDistanceMethod(event.target.value);\n  };\n\n  const handleDiagonal = event => {\n    setAllowDiagonal(event.target.checked);\n    chooseDiagonal(event.target.checked);\n  };\n\n  const handleAlgorithMethod = event => {\n    setAlgorithm(event.target.value);\n    getWhichAlgorithm(event.target.value);\n  };\n\n  return (\n    <div style={{ display: \"block\", marginTop: \"10px\", textAlign: \"center\" }}>\n      <FormGroup row style={{ textAlign: \"center\", display: \"block\" }}>\n        <FormControlLabel\n          control={\n            <Radio\n              checked={algorithm === \"dijkstra\"}\n              onChange={handleAlgorithMethod}\n              value=\"dijkstra\"\n              name=\"choose-distance-method\"\n              label=\"dijkstra\"\n            />\n          }\n          label=\"Dijkstra\"\n        />\n        <FormControlLabel\n          control={\n            <Radio\n              checked={algorithm === \"astar\"}\n              onChange={handleAlgorithMethod}\n              value=\"astar\"\n              name=\"choose-distance-method\"\n              label=\"astar\"\n            />\n          }\n          label=\"A-star\"\n        />\n      </FormGroup>\n\n      <FormGroup row style={{ textAlign: \"center\", display: \"block\" }}>\n        <FormControlLabel\n          control={\n            <Radio\n              checked={distanceMethod === \"manhattan\"}\n              onChange={handleDistanceMethod}\n              value=\"manhattan\"\n              name=\"choose-distance-method\"\n              label=\"m\"\n              disabled={algorithm === \"astar\" || !allowDiagonal}\n            />\n          }\n          label=\"manhattan\"\n        />\n        <FormControlLabel\n          control={\n            <Radio\n              checked={distanceMethod === \"chebyshev\"}\n              onChange={handleDistanceMethod}\n              value=\"chebyshev\"\n              name=\"choose-distance-method\"\n              label=\"c\"\n              disabled={algorithm === \"astar\" || !allowDiagonal}\n            />\n          }\n          label=\"chebyshev\"\n        />\n        <FormControlLabel\n          control={\n            <Radio\n              checked={distanceMethod === \"euclidean\"}\n              onChange={handleDistanceMethod}\n              value=\"euclidean\"\n              name=\"choose-distance-method\"\n              label=\"e\"\n              disabled={algorithm === \"astar\" || !allowDiagonal}\n            />\n          }\n          label=\"euclidean\"\n        />\n        <FormControlLabel\n          control={\n            <Checkbox\n              checked={allowDiagonal}\n              onChange={handleDiagonal}\n              disabled={algorithm === \"astar\"}\n            />\n          }\n          label=\"diagonal\"\n        />\n      </FormGroup>\n    </div>\n  );\n};\n\nexport default DistancePicker;\n","import { ROWS, COLUMNS } from \"../../parameters\";\n\nexport const createInitialGrid = start_finish => {\n  const grid = [];\n  for (let row = 0; row < ROWS; row++) {\n    const thisRow = [];\n    for (let col = 0; col < COLUMNS; col++) {\n      thisRow.push(createVertex({ row, col }, start_finish));\n    }\n    grid.push(thisRow);\n  }\n  return grid;\n};\n\nconst createVertex = (position, start_finish) => {\n  const {\n    start_vertex_row,\n    start_vertex_col,\n    finish_vertex_row,\n    finish_vertex_col\n  } = start_finish;\n  return {\n    position,\n    isStart:\n      position.row === start_vertex_row && position.col === start_vertex_col,\n    isFinish:\n      position.row === finish_vertex_row && position.col === finish_vertex_col,\n    distance: Infinity,\n    distanceToThis: Infinity,\n    heuristic: Infinity,\n\n    isVisited: false,\n    isWall: false,\n    isPath: false,\n    previousVertex: null,\n    draggable:\n      (position.row === start_vertex_row &&\n        position.col === start_vertex_col) ||\n      (position.row === finish_vertex_row && position.col === finish_vertex_col)\n  };\n};\n\nexport const createGridWithWalls = (grid, position) => {\n  const wallGrid = [...grid];\n  const vertex = wallGrid[position.row][position.col];\n  const newVertex = {\n    ...vertex,\n    isWall: !vertex.isWall, //changed here\n    isPath: false,\n    isVisited: false,\n    distance: Infinity,\n    distanceToThis: Infinity,\n    heuristic: Infinity,\n    draggable: false,\n    previousVertex: null\n  };\n  wallGrid[position.row][position.col] = newVertex;\n  return wallGrid;\n};\n\n//create a function for swapping a drid vertices\nexport const swapVertices = (grid, vertex, new_position) => {\n  const dragged_from_position = vertex.position;\n  // dropped at position\n  vertex.position = new_position;\n  grid[new_position.row][new_position.col] = vertex;\n  const empty_vertex = {\n    position: dragged_from_position,\n    isStart: false,\n    isFinish: false,\n    distance: Infinity,\n    distanceToThis: Infinity,\n    heuristic: Infinity,\n    isVisited: false,\n    isWall: false,\n    isPath: false,\n    previousVertex: null,\n    draggable: !vertex.draggable\n  };\n  grid[dragged_from_position.row][dragged_from_position.col] = empty_vertex;\n\n  vertex.distance = Infinity;\n  return grid;\n};\n\nexport const updateGrid = grid => {\n  for (let row = 0; row < ROWS; row++) {\n    for (let col = 0; col < COLUMNS; col++) {\n      //check the vertex\n      grid[row][col].distance = Infinity;\n      grid[row][col].distanceToThis = Infinity;\n      grid[row][col].heuristic = Infinity;\n      grid[row][col].isPath = false;\n      grid[row][col].isVisited = false;\n      grid[row][col].previousVertex = null;\n    }\n  }\n  return grid;\n};\n\n// need to handle move of the finish vertex\n// implement live update of the shortest path when either end or start\n// debug the walls placed after the move was done\n","/**\n *\n * This performs the Dijkstra algorithm returning all vertices that were\n * visited. Change the previousVertex value of the vertex to\n * backtrack from the finish vertex to the start vertex\n *\n */\nexport const dijkstra = (\n  grid,\n  start,\n  finish,\n  distanceMethod,\n  allowDiagonal\n) => {\n  const visitedInOrder = [];\n  // assign start vertex distance 0\n  // by default the vertices are infinite distance away from the start\n  start.distance = 0;\n  // get all vertices\n  const unvisitedVertices = getAllVertices(grid);\n  while (unvisitedVertices.length !== 0) {\n    getTheClosestVerticesFirst(unvisitedVertices);\n    const closestVertex = unvisitedVertices.shift();\n\n    if (closestVertex.isWall) continue;\n    if (closestVertex.distance === Infinity) return visitedInOrder;\n    updateUnvisitedNeighbors(\n      closestVertex,\n      grid,\n      distanceMethod,\n      allowDiagonal\n    );\n    closestVertex.isVisited = true;\n    visitedInOrder.push(closestVertex);\n    // before was like this :\n    // updateUnvisitedNeighbors(closestVertex, grid);\n    if (closestVertex === finish) return visitedInOrder;\n  }\n};\n\nconst getAllVertices = grid => {\n  const vertices = [];\n  for (const row of grid) for (const vertex of row) vertices.push(vertex);\n  return vertices;\n};\n\n// sort the vertices by ascending distance value\n// we can use PriorityQueue to improve on performance\nconst getTheClosestVerticesFirst = unvisitedVertices => {\n  unvisitedVertices.sort(\n    (vertexA, vertexB) => vertexA.distance - vertexB.distance\n  );\n};\n\nconst updateUnvisitedNeighbors = (\n  vertex,\n  grid,\n  distanceMethod,\n  allowDiagonal\n) => {\n  getUnvisitedNeighbors(vertex, grid, distanceMethod, allowDiagonal);\n};\n\nconst getUnvisitedNeighbors = (vertex, grid, distanceMethod, allowDiagonal) => {\n  const { row, col } = vertex.position;\n\n  if (allowDiagonal) {\n    let hVDistance, dDistance;\n    switch (distanceMethod) {\n      case \"manhattan\":\n        hVDistance = 1;\n        dDistance = 2;\n        break;\n      case \"euclidean\":\n        hVDistance = 1;\n        dDistance = 1.4;\n        break;\n      case \"chebyshev\":\n        hVDistance = 1;\n        dDistance = 1;\n        break;\n      default:\n        hVDistance = 1;\n        dDistance = 2;\n    }\n    // Top\n    let t;\n    if (row - 1 >= 0) {\n      // Top Left\n      if (col - 1 > 0) {\n        t = grid[row - 1][col - 1];\n        if (\n          !t.isVisited &&\n          !t.isWall &&\n          t.distance > vertex.distance + dDistance\n        ) {\n          t.distance = vertex.distance + dDistance;\n          t.previousVertex = vertex;\n        }\n      }\n      // Top Top\n      t = grid[row - 1][col];\n      if (\n        !t.isVisited &&\n        !t.isWall &&\n        t.distance > vertex.distance + hVDistance\n      ) {\n        t.distance = vertex.distance + hVDistance;\n        t.previousVertex = vertex;\n      }\n\n      // Top Right\n      if (col + 1 < grid[0].length) {\n        t = grid[row - 1][col + 1];\n        if (\n          !t.isVisited &&\n          !t.isWall &&\n          t.distance > vertex.distance + dDistance\n        ) {\n          t.distance = vertex.distance + dDistance;\n          t.previousVertex = vertex;\n        }\n      }\n    }\n\n    // Right\n    if (col + 1 < grid[0].length) {\n      t = grid[row][col + 1];\n      if (\n        !t.isVisited &&\n        !t.isWall &&\n        t.distance > vertex.distance + hVDistance\n      ) {\n        t.distance = vertex.distance + hVDistance;\n        t.previousVertex = vertex;\n      }\n    }\n\n    // Down\n    if (row + 1 < grid.length) {\n      // Down Right\n      if (col + 1 < grid[0].length) {\n        t = grid[row + 1][col + 1];\n        if (\n          !t.isVisited &&\n          !t.isWall &&\n          t.distance > vertex.distance + dDistance\n        ) {\n          t.distance = vertex.distance + dDistance;\n          t.previousVertex = vertex;\n        }\n      }\n      // Down Down\n      t = grid[row + 1][col];\n      if (\n        !t.isVisited &&\n        !t.isWall &&\n        t.distance > vertex.distance + hVDistance\n      ) {\n        t.distance = vertex.distance + hVDistance;\n        t.previousVertex = vertex;\n      }\n\n      // Down Left\n      if (col - 1 >= 0) {\n        t = grid[row + 1][col - 1];\n        if (\n          !t.isVisited &&\n          !t.isWall &&\n          t.distance > vertex.distance + dDistance\n        ) {\n          t.distance = vertex.distance + dDistance;\n          t.previousVertex = vertex;\n        }\n      }\n    }\n    // Left\n    if (col - 1 > 0) {\n      t = grid[row][col - 1];\n      if (\n        !t.isVisited &&\n        !t.isWall &&\n        t.distance > vertex.distance + hVDistance\n      ) {\n        t.distance = vertex.distance + hVDistance;\n        t.previousVertex = vertex;\n      }\n    }\n  } else {\n    //  non diagonal movements only\n    if (\n      row > 0 &&\n      !grid[row - 1][col].isVisited &&\n      !grid[row - 1][col].isWall\n    ) {\n      grid[row - 1][col].distance = vertex.distance + 1;\n      grid[row - 1][col].previousVertex = vertex;\n    }\n    if (\n      col < grid[0].length - 1 &&\n      !grid[row][col + 1].isVisited &&\n      !grid[row][col + 1].isWall\n    ) {\n      grid[row][col + 1].distance = vertex.distance + 1;\n      grid[row][col + 1].previousVertex = vertex;\n    }\n    if (\n      row < grid.length - 1 &&\n      !grid[row + 1][col].isVisited &&\n      !grid[row + 1][col].isWall\n    ) {\n      grid[row + 1][col].distance = vertex.distance + 1;\n      grid[row + 1][col].previousVertex = vertex;\n    }\n    if (\n      col > 0 &&\n      !grid[row][col - 1].isVisited &&\n      !grid[row][col - 1].isWall\n    ) {\n      grid[row][col - 1].distance = vertex.distance + 1;\n      grid[row][col - 1].previousVertex = vertex;\n    }\n  }\n};\n\nexport const backtrackRoute = (finish, start) => {\n  const backtrackedVertices = [];\n  let currentVertex = finish;\n  //   currentVertex = currentVertex.previousVertex;\n  if (currentVertex === null) return backtrackedVertices;\n  while (currentVertex !== start) {\n    currentVertex.isPath = true;\n    backtrackedVertices.unshift(currentVertex);\n    currentVertex = currentVertex.previousVertex;\n  }\n  return backtrackedVertices;\n};\n","/**\n *\n * This performs the Dijkstra algorithm returning all vertices that were\n * visited. Change the previousVertex value of the vertex to\n * backtrack from the finish vertex to the start vertex\n *\n */\nexport const astar = (grid, start, finish) => {\n  console.log(\"starting astar\");\n  const visitedInOrder = [];\n  // assign start vertex distance 0\n  // by default the vertices are infinite distance away from the start\n  start.distance = 0;\n  // get all vertices\n  const unvisitedVertices = getAllVertices(grid);\n  while (unvisitedVertices.length !== 0) {\n    getTheClosestVerticesFirst(unvisitedVertices);\n    const closestVertex = unvisitedVertices.shift();\n\n    if (closestVertex.isWall) continue;\n    if (closestVertex.distance === Infinity) return visitedInOrder;\n    updateUnvisitedNeighbors(closestVertex, grid, finish);\n    closestVertex.isVisited = true;\n    visitedInOrder.push(closestVertex);\n    // before was like this :\n    // updateUnvisitedNeighbors(closestVertex, grid);\n    if (closestVertex === finish) return visitedInOrder;\n  }\n};\n\nconst getAllVertices = grid => {\n  const vertices = [];\n  for (const row of grid) for (const vertex of row) vertices.push(vertex);\n  return vertices;\n};\n\n// sort the vertices by ascending distance value\n// we can use PriorityQueue to improve on performance\nconst getTheClosestVerticesFirst = unvisitedVertices => {\n  unvisitedVertices.sort(\n    (vertexA, vertexB) => vertexA.distance - vertexB.distance\n  );\n};\n\nconst updateUnvisitedNeighbors = (vertex, grid, finish) => {\n  getUnvisitedNeighbors(vertex, grid, finish);\n};\n\nconst getUnvisitedNeighbors = (vertex, grid, finish) => {\n  const { row, col } = vertex.position;\n  const heuristic = calculateHeuristic(vertex, finish);\n  const hVDistance = 1;\n  const dDistance = 2;\n\n  // Top\n  let t;\n  if (row - 1 >= 0) {\n    // Top Left\n    if (col - 1 > 0) {\n      t = grid[row - 1][col - 1];\n      if (\n        !t.isVisited &&\n        !t.isWall &&\n        t.distance > vertex.distance + dDistance + heuristic\n      ) {\n        t.distance = vertex.distance + dDistance + heuristic;\n        t.previousVertex = vertex;\n      }\n    }\n    // Top Top\n    t = grid[row - 1][col];\n    if (\n      !t.isVisited &&\n      !t.isWall &&\n      t.distance > vertex.distance + hVDistance + heuristic\n    ) {\n      t.distance = vertex.distance + hVDistance + heuristic;\n      t.previousVertex = vertex;\n    }\n\n    // Top Right\n    if (col + 1 < grid[0].length) {\n      t = grid[row - 1][col + 1];\n      if (\n        !t.isVisited &&\n        !t.isWall &&\n        t.distance > vertex.distance + dDistance + heuristic\n      ) {\n        t.distance = vertex.distance + dDistance + heuristic;\n        t.previousVertex = vertex;\n      }\n    }\n  }\n\n  // Right\n  if (col + 1 < grid[0].length) {\n    t = grid[row][col + 1];\n    if (\n      !t.isVisited &&\n      !t.isWall &&\n      t.distance > vertex.distance + hVDistance + heuristic\n    ) {\n      t.distance = vertex.distance + hVDistance + heuristic;\n      t.previousVertex = vertex;\n    }\n  }\n\n  // Down\n  if (row + 1 < grid.length) {\n    // Down Right\n    if (col + 1 < grid[0].length) {\n      t = grid[row + 1][col + 1];\n      if (\n        !t.isVisited &&\n        !t.isWall &&\n        t.distance > vertex.distance + dDistance + heuristic\n      ) {\n        t.distance = vertex.distance + dDistance + heuristic;\n        t.previousVertex = vertex;\n      }\n    }\n    // Down Down\n    t = grid[row + 1][col];\n    if (\n      !t.isVisited &&\n      !t.isWall &&\n      t.distance > vertex.distance + hVDistance + heuristic\n    ) {\n      t.distance = vertex.distance + hVDistance + heuristic;\n      t.previousVertex = vertex;\n    }\n\n    // Down Left\n    if (col - 1 >= 0) {\n      t = grid[row + 1][col - 1];\n      if (\n        !t.isVisited &&\n        !t.isWall &&\n        t.distance > vertex.distance + dDistance + heuristic\n      ) {\n        t.distance = vertex.distance + dDistance + heuristic;\n        t.previousVertex = vertex;\n      }\n    }\n  }\n  // Left\n  if (col - 1 > 0) {\n    t = grid[row][col - 1];\n    if (\n      !t.isVisited &&\n      !t.isWall &&\n      t.distance > vertex.distance + hVDistance + heuristic\n    ) {\n      t.distance = vertex.distance + hVDistance + heuristic;\n      t.previousVertex = vertex;\n    }\n  }\n};\n\nexport const backtrackRoute = (finish, start) => {\n  const backtrackedVertices = [];\n  let currentVertex = finish;\n  //   currentVertex = currentVertex.previousVertex;\n  if (currentVertex === null) return backtrackedVertices;\n  while (currentVertex !== start) {\n    currentVertex.isPath = true;\n    backtrackedVertices.unshift(currentVertex);\n    currentVertex = currentVertex.previousVertex;\n  }\n  return backtrackedVertices;\n};\n\nconst calculateHeuristic = (from, to) => {\n  return (\n    Math.abs(to.position.row - from.position.row) +\n    Math.abs(to.position.col - from.position.col)\n  );\n};\n","export const animateShortestPath = backtrackRoute => {\n  for (let i = 0; i < backtrackRoute.length; i++) {\n    setTimeout(() => {\n      const vertex = backtrackRoute[i];\n      document.getElementById(\n        `vertex-${vertex.position.row}-${vertex.position.col}`\n      ).className = \"vertex vertex-shortest-path\";\n    }, 40 * i);\n  }\n  document.getElementById(\"btnStart\").disabled = false;\n  document.getElementById(\"btnReset\").disabled = false;\n};\n\nexport const animateAlgorithm = (visitedInOrder, backtrackedVertices) => {\n  for (let i = 0; i <= visitedInOrder.length; i++) {\n    if (i === visitedInOrder.length) {\n      setTimeout(() => {\n        animateShortestPath(backtrackedVertices);\n      }, 40 * i);\n      return;\n    }\n    setTimeout(() => {\n      const row = visitedInOrder[i].position.row;\n      const col = visitedInOrder[i].position.col;\n      const isStart = visitedInOrder[i].isStart;\n      const isFinish = visitedInOrder[i].isFinish;\n\n      if (!(isStart || isFinish))\n        document.getElementById(`vertex-${row}-${col}`).className =\n          \"vertex vertex-visited\";\n    }, 40 * i);\n  }\n};\n","import React, { useEffect, useContext } from \"react\";\nimport GridContext from \"../context/grid/gridContext\";\nimport \"./PathfinderVisualizer.css\";\nimport Vertex from \"./Vertex/Vertex\";\nimport DistancePicker from \"../Components/Methods\";\n\nimport {\n  createInitialGrid,\n  createGridWithWalls,\n  swapVertices,\n  updateGrid\n} from \"./Initializers/GridInitializers\";\nimport { dijkstra, backtrackRoute } from \"../algorithms/dijkstra\";\nimport { astar } from \"../algorithms/astar\";\nimport { resetGrid } from \"../PathfinderVisualizer/Initializers/GridReset\";\nimport { animateAlgorithm } from \"./Visualizers/Visualize\";\n\nimport { ROWS, COLUMNS } from \"../parameters\";\n\nconst PathfinderVisualizer = () => {\n  const gridContext = useContext(GridContext);\n\n  const {\n    grid,\n    setGrid,\n    setMouseIsPressed,\n    start_vertex_row,\n    start_vertex_col,\n    finish_vertex_row,\n    finish_vertex_col,\n    mouseIsPressed,\n    setStart,\n    setFinish,\n    distanceMethod,\n    allowDiagonal,\n    setDistanceMethod,\n    setAllowDiagonal,\n    algorithm,\n    setAlgorithm\n  } = gridContext;\n\n  const start_finish = {\n    start_vertex_row,\n    start_vertex_col,\n    finish_vertex_row,\n    finish_vertex_col\n  };\n\n  useEffect(() => {\n    // eslint-disable-next-line\n    setGrid(createInitialGrid(start_finish));\n  }, []);\n\n  const handleDragStart = (event, position, vertex) => {\n    const { row, col } = position;\n\n    if (\n      !(row === start_vertex_row && col === start_vertex_col) &&\n      !(row === finish_vertex_row && col === finish_vertex_col)\n    ) {\n      return;\n    } else {\n      const vertexData = JSON.stringify(vertex);\n      event.dataTransfer.setData(\"vertex_data\", vertexData);\n    }\n\n    return;\n  };\n  const handleDragOver = (event, position) => {\n    event.preventDefault();\n    event.stopPropagation();\n  };\n\n  const handleDrop = (event, new_position) => {\n    const vertex = JSON.parse(event.dataTransfer.getData(\"vertex_data\"));\n    if (vertex.isStart || vertex.isFinish) {\n      if (\n        (new_position.row === finish_vertex_row &&\n          new_position.col === finish_vertex_col) ||\n        (new_position.row === start_vertex_row &&\n          new_position.col === start_vertex_col)\n      )\n        return;\n    }\n    // reassign the start or finish vertex depending on the vertex.isFinish \\\\ vertex.isStart\n    if (vertex.isStart) {\n      setStart(new_position);\n    } else {\n      setFinish(new_position);\n    }\n    setGrid(swapVertices(grid, vertex, new_position));\n    setGrid(updateGrid(grid));\n    clearTheVisualOfVertex();\n    event.dataTransfer.clearData();\n  };\n\n  const handleDrag = position => {\n    return;\n  };\n\n  const clearTheVisualOfVertex = () => {\n    for (let row = 0; row < ROWS; row++) {\n      for (let col = 0; col < COLUMNS; col++) {\n        let thisVertex = grid[row][col];\n        if (thisVertex.isStart)\n          document.getElementById(`vertex-${row}-${col}`).className =\n            \"vertex vertex-start\";\n        else if (thisVertex.isFinish)\n          document.getElementById(`vertex-${row}-${col}`).className =\n            \"vertex vertex-finish\";\n        else if (thisVertex.isWall)\n          document.getElementById(`vertex-${row}-${col}`).className =\n            \"vertex vertex-wall vertex-non-draggable\";\n        else {\n          document.getElementById(`vertex-${row}-${col}`).className = \"vertex \";\n        }\n      }\n    }\n  };\n\n  const handleMouseDown = position => {\n    const { row, col } = position;\n\n    if (!grid[row][col].isStart && !grid[row][col].isFinish) {\n      const wallGrid = createGridWithWalls(grid, position);\n      setGrid(wallGrid);\n      updateGrid(wallGrid);\n      setMouseIsPressed(true);\n      clearTheVisualOfVertex();\n    }\n  };\n\n  const handleMouseEnter = position => {\n    const { row, col } = position;\n    if (!mouseIsPressed) return;\n    if (!grid[row][col].isStart && !grid[row][col].isFinish) {\n      const wallGrid = createGridWithWalls(grid, position);\n      setGrid(wallGrid);\n      updateGrid(wallGrid);\n      clearTheVisualOfVertex();\n    }\n  };\n  const handleMouseUp = position => {\n    setMouseIsPressed(false);\n  };\n\n  const visualizeAlgorithm = () => {\n    // call the function to partially reset the grid\n    // keeping the walls and start/finish points\n\n    document.getElementById(\"btnStart\").disabled = true;\n    document.getElementById(\"btnReset\").disabled = true;\n    for (let row = 0; row < ROWS; row++) {\n      for (let col = 0; col < COLUMNS; col++) {\n        let thisVertex = grid[row][col];\n\n        if (thisVertex.isStart)\n          document.getElementById(`vertex-${row}-${col}`).className =\n            \"vertex vertex-start\";\n        else if (thisVertex.isFinish)\n          document.getElementById(`vertex-${row}-${col}`).className =\n            \"vertex vertex-finish\";\n        else if (thisVertex.isWall)\n          document.getElementById(`vertex-${row}-${col}`).className =\n            \"vertex vertex-wall\";\n        else if (thisVertex.isVisited)\n          document.getElementById(`vertex-${row}-${col}`).className = \"vertex\";\n      }\n    }\n    const startVertex = grid[start_vertex_row][start_vertex_col];\n    const finishVertex = grid[finish_vertex_row][finish_vertex_col];\n    console.log(distanceMethod);\n    let visitedInOrder;\n    if (algorithm === \"astar\")\n      visitedInOrder = astar(grid, startVertex, finishVertex);\n    else {\n      visitedInOrder = dijkstra(\n        grid,\n        startVertex,\n        finishVertex,\n        distanceMethod,\n        allowDiagonal\n      );\n    }\n\n    const backtrackedVertices = backtrackRoute(finishVertex, startVertex);\n    animateAlgorithm(visitedInOrder, backtrackedVertices);\n  };\n\n  const chooseDiagonalMethod = event => {\n    setAllowDiagonal(event);\n    setGrid(updateGrid(grid));\n    clearTheVisualOfVertex();\n  };\n\n  const chooseDistanceMethod = event => {\n    setGrid(updateGrid(grid));\n    clearTheVisualOfVertex();\n    setDistanceMethod(event);\n  };\n  const chooseAlgorithm = event => {\n    setGrid(updateGrid(grid));\n    clearTheVisualOfVertex();\n    setAlgorithm(event);\n  };\n\n  return (\n    <>\n      <div>\n        {\" \"}\n        <button\n          id=\"btnStart\"\n          className=\"btn\"\n          onClick={() => visualizeAlgorithm()}\n        >\n          Start\n        </button>\n        <button\n          id=\"btnReset\"\n          className=\"btn\"\n          onClick={() => resetGrid(grid, setGrid, start_finish)}\n        >\n          Reset Grid\n        </button>\n      </div>\n      <DistancePicker\n        getWhichAlgorithm={chooseAlgorithm}\n        getDistanceMethod={chooseDistanceMethod}\n        chooseDiagonal={chooseDiagonalMethod}\n      />\n      <table className=\"grid\" draggable=\"false\">\n        <tbody className=\"grid\" draggable=\"false\">\n          {grid.map((row, row_index) => {\n            return (\n              <tr className=\"row\" key={row_index}>\n                {row.map((vertex, vertex_index) => {\n                  const {\n                    position,\n                    isFinish,\n                    isStart,\n                    isWall,\n                    isVisited,\n                    isPath,\n                    distance\n                  } = vertex;\n                  return (\n                    <Vertex\n                      key={vertex_index}\n                      position={position}\n                      isFinish={isFinish}\n                      isStart={isStart}\n                      onMouseDown={position => handleMouseDown(position)}\n                      onMouseEnter={position => handleMouseEnter(position)}\n                      onMouseUp={position => handleMouseUp(position)}\n                      onDragStart={e => handleDragStart(e, position, vertex)}\n                      onDragOver={event => handleDragOver(event, position)}\n                      onDrop={event => handleDrop(event, position)}\n                      onDrag={handleDrag}\n                      mouseIsPressed={mouseIsPressed}\n                      isWall={isWall}\n                      distance={distance}\n                      isVisited={isVisited}\n                      isPath={isPath}\n                      draggable={(isStart || isFinish) && !isWall}\n                    ></Vertex>\n                  );\n                })}\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </>\n  );\n};\n\nexport default PathfinderVisualizer;\n","import { createInitialGrid } from \"../Initializers/GridInitializers\";\nimport { ROWS, COLUMNS } from \"../../parameters\";\n\nexport const resetGrid = (grid, setGrid, start_finish) => {\n  const resetGrid = createInitialGrid(start_finish);\n  setGrid(resetGrid);\n  for (let row = 0; row < ROWS; row++) {\n    for (let col = 0; col < COLUMNS; col++) {\n      let thisVertex = grid[row][col];\n      if (thisVertex.isStart)\n        document.getElementById(`vertex-${row}-${col}`).className =\n          \"vertex vertex-start\";\n      else if (thisVertex.isFinish)\n        document.getElementById(`vertex-${row}-${col}`).className =\n          \"vertex vertex-finish\";\n      else {\n        document.getElementById(`vertex-${row}-${col}`).className = \"vertex \";\n      }\n    }\n  }\n};\n","import React from \"react\";\nimport \"./App.css\";\nimport GridState from \"./context/grid/GridState\";\nimport PathfinderVisualizer from \"./PathfinderVisualizer/PathfinderVisualizer\";\nimport Particles from \"react-particles-js\";\nimport particlesjsconfig from \"./utilities/particlesjs-config.json\";\n\nfunction App() {\n  return (\n    <GridState>\n      <div className=\"App\" draggable=\"false\">\n        <h1>Pathfinder visualization</h1>\n        <PathfinderVisualizer />\n      </div>\n      <Particles className=\"particles\" params={particlesjsconfig} />\n    </GridState>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}