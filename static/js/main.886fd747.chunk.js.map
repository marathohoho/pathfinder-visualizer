{"version":3,"sources":["context/grid/gridContext.js","context/grid/gridReducer.js","context/types.js","parameters.js","context/grid/GridState.js","PathfinderVisualizer/Vertex/Vertex.js","PathfinderVisualizer/Initializers/GridInitializers.js","algorithms/dijkstra.js","PathfinderVisualizer/Visualizers/Visualize.js","PathfinderVisualizer/PathfinderVisualizer.jsx","PathfinderVisualizer/Initializers/GridReset.js","App.js","serviceWorker.js","index.js"],"names":["GridContext","createContext","state","action","type","grid","payload","start_vertex_row","start_vertex_col","finish_vertex_row","finish_vertex_col","mouseIsPressed","isDragging","original_row","original_col","translate_row","translate_col","last_translate_row","last_translate_col","COLUMNS","window","innerWidth","GridState","props","initialState","useReducer","gridReducer","dispatch","Provider","value","setGrid","setStart","position","row","col","setFinish","setMouseIsPressed","pressed","setIsDragging","started_dragging","setOriginal","setTranslate","setLastTranslate","children","Vertex","isFinish","isStart","isWall","onMouseDown","onMouseEnter","onMouseUp","isVisited","isPath","onDragStart","onDragOver","onDrop","distance","extraClassName","draggable","console","log","id","className","Infinity","createInitialGrid","start_finish","thisRow","push","createVertex","previousVertex","createGridWithWalls","wallGrid","vertex","newVertex","updateGrid","getAllVertices","vertices","getTheClosestVerticesFirst","unvisitedVertices","sort","vertexA","vertexB","updateUnvisitedNeighbors","unvisitedNeighbors","getUnvisitedNeighbors","t","length","animateAlgorithm","visitedInOrder","backtrackedVertices","i","setTimeout","backtrackRoute","document","getElementById","disabled","animateShortestPath","PathfinderVisualizer","gridContext","useContext","useEffect","handleDrag","clearTheVisualOfVertex","thisVertex","visualizeAlgorithm","startVertex","finishVertex","start","finish","closestVertex","shift","dijkstra","currentVertex","unshift","onClick","resetGrid","map","row_index","key","vertex_index","handleMouseDown","handleMouseEnter","e","event","vertexData","JSON","stringify","dataTransfer","setData","handleDragStart","preventDefault","stopPropagation","handleDragOver","new_position","parse","getData","dragged_from_position","empty_vertex","swapVertices","clearData","handleDrop","onDrag","App","Boolean","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.886fd747.chunk.js","sourcesContent":["import { createContext } from \"react\";\n\nconst GridContext = createContext();\n\nexport default GridContext;\n","/**\n *\n * Deleted all the get actions, because triggering the data\n * does not happen in the reducer. Only setting the state values happen\n * in reducer.\n * State values can be retrieved inside the functional component itself.\n *\n */\n\nimport {\n  SET_GRID,\n  SET_STARTING_ROW,\n  SET_STARTING_COL,\n  SET_FINISH_ROW,\n  SET_FINISH_COL,\n  SET_MOUSE_IS_PRESSED,\n  IS_DRAGGING,\n  SET_ORIGINAL_ROW,\n  SET_ORIGINAL_COL,\n  SET_TRANSLATE_ROW,\n  SET_TRANSLATE_COL,\n  SET_LAST_TRANSLATE_ROW,\n  SET_LAST_TRANSLATE_COL\n} from \"../types.js\";\n\nexport default (state, action) => {\n  switch (action.type) {\n    case SET_GRID:\n      return { ...state, grid: action.payload };\n\n    case SET_STARTING_ROW:\n      return { ...state, start_vertex_row: action.payload };\n\n    case SET_STARTING_COL:\n      return { ...state, start_vertex_col: action.payload };\n\n    case SET_FINISH_ROW:\n      return { ...state, finish_vertex_row: action.payload };\n\n    case SET_FINISH_COL:\n      return { ...state, finish_vertex_col: action.payload };\n\n    case SET_MOUSE_IS_PRESSED:\n      return { ...state, mouseIsPressed: action.payload };\n    // related to dragging :\n    case IS_DRAGGING:\n      return { ...state, isDragging: action.payload };\n\n    case SET_ORIGINAL_ROW:\n      return { ...state, original_row: action.payload };\n\n    case SET_ORIGINAL_COL:\n      return { ...state, original_col: action.payload };\n\n    case SET_TRANSLATE_ROW:\n      return { ...state, translate_row: action.payload };\n\n    case SET_TRANSLATE_COL:\n      return { ...state, translate_col: action.payload };\n\n    case SET_LAST_TRANSLATE_ROW:\n      return { ...state, last_translate_row: action.payload };\n\n    case SET_LAST_TRANSLATE_COL:\n      return { ...state, last_translate_col: action.payload };\n\n    default:\n      return state;\n  }\n};\n","export const SET_GRID = \"SET_GRID\";\nexport const SET_STARTING_ROW = \"SET_STARTING_ROW\";\nexport const SET_STARTING_COL = \"SET_STARTING_COL\";\nexport const SET_FINISH_ROW = \"SET_FINISH_ROW\";\nexport const SET_FINISH_COL = \"SET_FINISH_COL\";\n\nexport const SET_MOUSE_IS_PRESSED = \"SET_MOUSE_IS_PRESSED\";\n\nexport const IS_DRAGGING = \"IS_DRAGGING\";\n\nexport const SET_ORIGINAL_ROW = \"SET_ORIGINAL_ROW\";\nexport const SET_ORIGINAL_COL = \"SET_ORIGINAL_COL\";\n\nexport const SET_TRANSLATE_ROW = \"SET_TRANSLATE_ROW\";\nexport const SET_TRANSLATE_COL = \"SET_TRANSLATE_COL\";\n\nexport const SET_LAST_TRANSLATE_ROW = \"SET_LAST_TRANSLATE_ROW\";\nexport const SET_LAST_TRANSLATE_COL = \"SET_LAST_TRANSLATE_COL\";\n","export const ROWS = 20;\nexport const COLUMNS = window.innerWidth / 35;\nexport const FAST = 10;\nexport const MEDIUM = 40;\nexport const SLOW = 80;\nexport const speed = SLOW;\n\n// the following attributes will be dependent on the user\n// export const START_VERTEX_ROW_ = Math.floor(Math.random() * ROWS + 1);\n// export const START_VERTEX_COL_ = Math.floor(Math.random() * COLUMNS + 1);\n// export const FINISH_VERTEX_ROW_ = Math.floor(Math.random() * ROWS + 1);\n// export const FINISH_VERTEX_COL_ = Math.floor(Math.random() * COLUMNS + 1);\nexport const START_VERTEX_ROW_ = 3;\nexport const START_VERTEX_COL_ = 3;\nexport const FINISH_VERTEX_ROW_ = 6;\nexport const FINISH_VERTEX_COL_ = 6;\n","import React, { useReducer } from \"react\";\nimport gridContext from \"./gridContext\";\nimport gridReducer from \"./gridReducer\";\n\nimport {\n  START_VERTEX_ROW_,\n  START_VERTEX_COL_,\n  FINISH_VERTEX_ROW_,\n  FINISH_VERTEX_COL_\n} from \"../../parameters\";\n\nimport {\n  SET_GRID,\n  SET_STARTING_ROW,\n  SET_STARTING_COL,\n  SET_FINISH_ROW,\n  SET_FINISH_COL,\n  SET_MOUSE_IS_PRESSED,\n  IS_DRAGGING,\n  SET_ORIGINAL_ROW,\n  SET_ORIGINAL_COL,\n  SET_TRANSLATE_ROW,\n  SET_TRANSLATE_COL,\n  SET_LAST_TRANSLATE_ROW,\n  SET_LAST_TRANSLATE_COL\n} from \"../types.js\";\n\n/**\n * Need to update :\n * 1. Start/Finish\n * 2. Grid\n * 3. Grid with walls\n * 4. mouseIsPressed\n * 5. isDragging\n *\n */\nconst GridState = props => {\n  const initialState = {\n    grid: [],\n\n    mouseIsPressed: false,\n\n    start_vertex_row: START_VERTEX_ROW_,\n    start_vertex_col: START_VERTEX_COL_,\n    finish_vertex_row: FINISH_VERTEX_ROW_,\n    finish_vertex_col: FINISH_VERTEX_COL_,\n\n    isDragging: false,\n\n    original_row: 0,\n    original_col: 0,\n\n    translate_row: 0,\n    translate_col: 0,\n\n    last_translate_row: 0,\n    last_translate_col: 0\n  };\n\n  const [state, dispatch] = useReducer(gridReducer, initialState);\n\n  const setGrid = grid => {\n    dispatch({ type: SET_GRID, payload: grid });\n  };\n\n  const setStart = position => {\n    dispatch({ type: SET_STARTING_ROW, payload: position.row });\n    dispatch({ type: SET_STARTING_COL, payload: position.col });\n  };\n\n  const setFinish = position => {\n    dispatch({ type: SET_FINISH_ROW, payload: position.row });\n    dispatch({ type: SET_FINISH_COL, payload: position.col });\n  };\n\n  const setMouseIsPressed = pressed => {\n    dispatch({ type: SET_MOUSE_IS_PRESSED, payload: pressed });\n  };\n\n  //   for dragging actions\n  const setIsDragging = started_dragging => {\n    dispatch({ type: IS_DRAGGING, payload: started_dragging });\n  };\n\n  const setOriginal = position => {\n    dispatch({ type: SET_ORIGINAL_ROW, payload: position.row });\n    dispatch({ type: SET_ORIGINAL_COL, payload: position.col });\n  };\n\n  const setTranslate = position => {\n    dispatch({ type: SET_TRANSLATE_ROW, payload: position.row });\n    dispatch({ type: SET_TRANSLATE_COL, payload: position.col });\n  };\n\n  const setLastTranslate = position => {\n    dispatch({ type: SET_LAST_TRANSLATE_ROW, payload: position.row });\n    dispatch({ type: SET_LAST_TRANSLATE_COL, payload: position.col });\n  };\n\n  return (\n    <gridContext.Provider\n      value={{\n        grid: state.grid,\n        setGrid,\n        setStart,\n        setFinish,\n        setMouseIsPressed,\n        setIsDragging,\n        setOriginal,\n        setTranslate,\n        setLastTranslate,\n        mouseIsPressed: state.mouseIsPressed,\n        start_vertex_row: state.start_vertex_row,\n        start_vertex_col: state.start_vertex_col,\n        finish_vertex_row: state.finish_vertex_row,\n        finish_vertex_col: state.finish_vertex_col,\n        isDragging: state.isDragging,\n        original_row: state.original_row,\n        original_col: state.original_col,\n        translate_row: state.translate_row,\n        translate_col: state.translate_col,\n        last_translate_row: state.last_translate_row,\n        last_translate_col: state.last_translate_col\n      }}\n    >\n      {props.children}\n    </gridContext.Provider>\n  );\n};\n/**\n * ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n * this is where we return the state variables\n */\n\nexport default GridState;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport \"./Vertex.css\";\n\nconst Vertex = props => {\n  const {\n    position,\n    isFinish,\n    isStart,\n    isWall,\n    onMouseDown,\n    onMouseEnter,\n    onMouseUp,\n    isVisited,\n    isPath,\n    onDragStart,\n    onDragOver,\n    onDrop,\n    distance,\n    draggable\n    // onDrag\n  } = props;\n  const extraClassName = isFinish\n    ? \"vertex-finish\"\n    : isStart\n    ? \"vertex-start\"\n    : isWall\n    ? \"vertex-wall vertex-non-draggable\"\n    : isPath\n    ? \"vertex-shortest-path vertex-non-draggable\"\n    : isVisited\n    ? \"vertex-visited vertex-non-draggable\"\n    : \"vertex-non-draggable\";\n\n  console.log(\"triggered\");\n  return (\n    <td\n      id={`vertex-${position.row}-${position.col}`}\n      className={`vertex ${extraClassName}`}\n      onMouseDown={() => onMouseDown(position)}\n      onMouseEnter={() => onMouseEnter(position)}\n      onMouseUp={() => onMouseUp(position)}\n      onDragStart={onDragStart}\n      onDragOver={onDragOver}\n      onDrop={onDrop}\n      draggable={(isStart || isFinish) && !isWall}\n    >\n      {distance === Infinity ? \"I\" : distance}\n    </td>\n  );\n};\n\nVertex.propTypes = {\n  position: PropTypes.object,\n  isFinish: PropTypes.bool,\n  isStart: PropTypes.bool,\n  isWall: PropTypes.bool,\n  onMouseDown: PropTypes.func,\n  onMouseUp: PropTypes.func,\n  onMouseEnter: PropTypes.func,\n  mouseIsPressed: PropTypes.bool\n};\n\nexport default Vertex;\n","import { ROWS, COLUMNS } from \"../../parameters\";\n\nexport const createInitialGrid = start_finish => {\n  const grid = [];\n  for (let row = 0; row < ROWS; row++) {\n    const thisRow = [];\n    for (let col = 0; col < COLUMNS; col++) {\n      thisRow.push(createVertex({ row, col }, start_finish));\n    }\n    grid.push(thisRow);\n  }\n  return grid;\n};\n\nconst createVertex = (position, start_finish) => {\n  const {\n    start_vertex_row,\n    start_vertex_col,\n    finish_vertex_row,\n    finish_vertex_col\n  } = start_finish;\n  return {\n    position,\n    isStart:\n      position.row === start_vertex_row && position.col === start_vertex_col,\n    isFinish:\n      position.row === finish_vertex_row && position.col === finish_vertex_col,\n    distance: Infinity,\n    isVisited: false,\n    isWall: false,\n    isPath: false,\n    previousVertex: null,\n    draggable:\n      (position.row === start_vertex_row &&\n        position.col === start_vertex_col) ||\n      (position.row === finish_vertex_row && position.col === finish_vertex_col)\n  };\n};\n\nexport const createGridWithWalls = (grid, position) => {\n  const wallGrid = [...grid];\n  const vertex = wallGrid[position.row][position.col];\n  const newVertex = {\n    ...vertex,\n    isWall: !vertex.isWall, //changed here\n    isPath: false,\n    isVisited: false,\n    distance: Infinity,\n    draggable: false,\n    previousVertex: null\n  };\n  wallGrid[position.row][position.col] = newVertex;\n  return wallGrid;\n};\n\n//create a function for swapping a drid vertices\nexport const swapVertices = (grid, vertex, new_position) => {\n  const dragged_from_position = vertex.position;\n  // dropped at position\n  vertex.position = new_position;\n  grid[new_position.row][new_position.col] = vertex;\n  const empty_vertex = {\n    position: dragged_from_position,\n    isStart: false,\n    isFinish: false,\n    distance: Infinity,\n    isVisited: false,\n    isWall: false,\n    isPath: false,\n    previousVertex: null,\n    draggable: !vertex.draggable\n  };\n  grid[dragged_from_position.row][dragged_from_position.col] = empty_vertex;\n\n  vertex.distance = Infinity;\n  return grid;\n};\n\nexport const updateGrid = grid => {\n  for (let row = 0; row < ROWS; row++) {\n    for (let col = 0; col < COLUMNS; col++) {\n      //check the vertex\n      grid[row][col].distance = Infinity;\n      grid[row][col].isPath = false;\n      grid[row][col].isVisited = false;\n      grid[row][col].previousVertex = null;\n    }\n  }\n  return grid;\n};\n\n// need to handle move of the finish vertex\n// implement live update of the shortest path when either end or start\n// debug the walls placed after the move was done\n","/**\n *\n * This performs the Dijkstra algorithm returning all vertices that were\n * visited. Change the previousVertex value of the vertex to\n * backtrack from the finish vertex to the start vertex\n *\n */\nexport const dijkstra = (grid, start, finish) => {\n  const visitedInOrder = [];\n  // assign start vertex distance 0\n  // by default the vertices are infinite distance away from the start\n  start.distance = 0;\n  // get all vertices\n  const unvisitedVertices = getAllVertices(grid);\n  while (unvisitedVertices.length !== 0) {\n    getTheClosestVerticesFirst(unvisitedVertices);\n    const closestVertex = unvisitedVertices.shift();\n\n    if (closestVertex.isWall) continue;\n    if (closestVertex.distance === Infinity) return visitedInOrder;\n    updateUnvisitedNeighbors(closestVertex, grid);\n    closestVertex.isVisited = true;\n    visitedInOrder.push(closestVertex);\n    // before was like this :\n    // updateUnvisitedNeighbors(closestVertex, grid);\n\n    if (closestVertex === finish) return visitedInOrder;\n  }\n};\n\nconst getAllVertices = grid => {\n  const vertices = [];\n  for (const row of grid) for (const vertex of row) vertices.push(vertex);\n  return vertices;\n};\n\n// sort the vertices by ascending distance value\n// we can use PriorityQueue to improve on performance\nconst getTheClosestVerticesFirst = unvisitedVertices => {\n  unvisitedVertices.sort(\n    (vertexA, vertexB) => vertexA.distance - vertexB.distance\n  );\n};\n\nconst updateUnvisitedNeighbors = (vertex, grid) => {\n  const unvisitedNeighbors = getUnvisitedNeighbors(vertex, grid);\n  console.log(unvisitedNeighbors);\n  //  do we actually need this part\n  //   for (const neighbor of unvisitedNeighbors) {\n  //     neighbor.distance = vertex.distance + 1;\n  //     neighbor.previousVertex = vertex;\n  //   }\n};\n\nconst getUnvisitedNeighbors = (vertex, grid) => {\n  const neighbors = [];\n  const { row, col } = vertex.position;\n\n  // this is the diagonal move\n  //   this method does not use neighbors array\n  //  write straight into the grid\n  const hVDistance = 1;\n  const dDistance = 1.4;\n  // Top\n  let t;\n  if (row - 1 >= 0) {\n    // Top Top\n    t = grid[row - 1][col];\n    if (\n      !t.isVisited &&\n      !t.isWall &&\n      t.distance > vertex.distance + hVDistance\n    ) {\n      t.distance = vertex.distance + hVDistance;\n      t.previousVertex = vertex;\n    }\n\n    // Top Left\n    if (col - 1 > 0) {\n      t = grid[row - 1][col - 1];\n      if (\n        !t.isVisited &&\n        !t.isWall &&\n        t.distance > vertex.distance + dDistance\n      ) {\n        t.distance = vertex.distance + dDistance;\n        t.previousVertex = vertex;\n      }\n    }\n\n    // Top Right\n    if (col + 1 < grid[0].length) {\n      t = grid[row - 1][col + 1];\n      if (\n        !t.isVisited &&\n        !t.isWall &&\n        t.distance > vertex.distance + dDistance\n      ) {\n        t.distance = vertex.distance + dDistance;\n        t.previousVertex = vertex;\n      }\n    }\n  }\n\n  // Left\n  if (col - 1 > 0) {\n    t = grid[row][col - 1];\n    if (\n      !t.isVisited &&\n      !t.isWall &&\n      t.distance > vertex.distance + hVDistance\n    ) {\n      t.distance = vertex.distance + hVDistance;\n      t.previousVertex = vertex;\n    }\n  }\n\n  // Right\n  if (col + 1 < grid[0].length) {\n    t = grid[row][col + 1];\n    if (\n      !t.isVisited &&\n      !t.isWall &&\n      t.distance > vertex.distance + hVDistance\n    ) {\n      t.distance = vertex.distance + hVDistance;\n      t.previousVertex = vertex;\n    }\n  }\n  // Down\n  if (row + 1 < grid.length) {\n    // Down Down\n    t = grid[row + 1][col];\n    if (\n      !t.isVisited &&\n      !t.isWall &&\n      t.distance > vertex.distance + hVDistance\n    ) {\n      t.distance = vertex.distance + hVDistance;\n      t.previousVertex = vertex;\n    }\n\n    // Down Left\n    if (col - 1 >= 0) {\n      t = grid[row + 1][col - 1];\n      if (\n        !t.isVisited &&\n        !t.isWall &&\n        t.distance > vertex.distance + dDistance\n      ) {\n        t.distance = vertex.distance + dDistance;\n        t.previousVertex = vertex;\n      }\n    }\n\n    // Down Right\n    if (col + 1 < grid[0].length) {\n      t = grid[row + 1][col + 1];\n      if (\n        !t.isVisited &&\n        !t.isWall &&\n        t.distance > vertex.distance + dDistance\n      ) {\n        t.distance = vertex.distance + dDistance;\n        t.previousVertex = vertex;\n      }\n    }\n  }\n\n  //   adjust this logic\n  // give the user an option of travelling diagonally or not\n  // this is not the diagonal move\n  //   if (row > 0) neighbors.push(grid[row - 1][col]);\n  //   if (col < grid[0].length - 1) neighbors.push(grid[row][col + 1]);\n  //   if (row < grid.length - 1) neighbors.push(grid[row + 1][col]);\n  //   if (col > 0) neighbors.push(grid[row][col - 1]);\n\n  //  we can do this check when pushing the vertex into the neighbors list,\n  // don;t push the vertex that is a wall\n  //   return neighbors.filter(neighbor => !neighbor.isVisited);\n  return neighbors;\n};\n\nexport const backtrackRoute = (finish, start) => {\n  const backtrackedVertices = [];\n  let currentVertex = finish;\n  currentVertex = currentVertex.previousVertex;\n  if (currentVertex === null) return backtrackedVertices;\n  while (currentVertex !== start) {\n    currentVertex.isPath = true;\n    backtrackedVertices.unshift(currentVertex);\n    currentVertex = currentVertex.previousVertex;\n  }\n  return backtrackedVertices;\n};\n","export const animateShortestPath = backtrackRoute => {\n  for (let i = 0; i < backtrackRoute.length; i++) {\n    setTimeout(() => {\n      const vertex = backtrackRoute[i];\n      document.getElementById(\n        `vertex-${vertex.position.row}-${vertex.position.col}`\n      ).className = \"vertex vertex-shortest-path\";\n    }, 40 * i);\n  }\n  document.getElementById(\"btnStart\").disabled = false;\n  document.getElementById(\"btnReset\").disabled = false;\n};\n\nexport const animateAlgorithm = (visitedInOrder, backtrackedVertices) => {\n  for (let i = 0; i <= visitedInOrder.length; i++) {\n    if (i === visitedInOrder.length) {\n      setTimeout(() => {\n        animateShortestPath(backtrackedVertices);\n      }, 40 * i);\n      return;\n    }\n    setTimeout(() => {\n      const row = visitedInOrder[i].position.row;\n      const col = visitedInOrder[i].position.col;\n      const isStart = visitedInOrder[i].isStart;\n      const isFinish = visitedInOrder[i].isFinish;\n\n      if (!(isStart || isFinish))\n        document.getElementById(`vertex-${row}-${col}`).className =\n          \"vertex vertex-visited\";\n    }, 40 * i);\n  }\n};\n","import React, { useEffect, useContext } from \"react\";\n\nimport GridContext from \"../context/grid/gridContext\";\nimport \"./PathfinderVisualizer.css\";\nimport Vertex from \"./Vertex/Vertex\";\n\nimport {\n  createInitialGrid,\n  createGridWithWalls,\n  swapVertices,\n  updateGrid\n} from \"./Initializers/GridInitializers\";\nimport { dijkstra, backtrackRoute } from \"../algorithms/dijkstra\";\nimport { resetGrid } from \"../PathfinderVisualizer/Initializers/GridReset\";\nimport { animateAlgorithm } from \"./Visualizers/Visualize\";\n\nimport { ROWS, COLUMNS } from \"../parameters\";\n\nconst PathfinderVisualizer = () => {\n  const gridContext = useContext(GridContext);\n\n  const {\n    grid,\n    setGrid,\n    setMouseIsPressed,\n    start_vertex_row,\n    start_vertex_col,\n    finish_vertex_row,\n    finish_vertex_col,\n    mouseIsPressed,\n    setStart,\n    setFinish\n  } = gridContext;\n\n  const start_finish = {\n    start_vertex_row,\n    start_vertex_col,\n    finish_vertex_row,\n    finish_vertex_col\n  };\n\n  useEffect(() => {\n    // eslint-disable-next-line\n    setGrid(createInitialGrid(start_finish));\n  }, []);\n\n  const handleDragStart = (event, position, vertex) => {\n    const { row, col } = position;\n\n    if (\n      !(row === start_vertex_row && col === start_vertex_col) &&\n      !(row === finish_vertex_row && col === finish_vertex_col)\n    ) {\n      return;\n    } else {\n      const vertexData = JSON.stringify(vertex);\n      event.dataTransfer.setData(\"vertex_data\", vertexData);\n    }\n\n    return;\n  };\n  const handleDragOver = (event, position) => {\n    event.preventDefault();\n    event.stopPropagation();\n  };\n\n  const handleDrop = (event, new_position) => {\n    const vertex = JSON.parse(event.dataTransfer.getData(\"vertex_data\"));\n    if (vertex.isStart || vertex.isFinish) {\n      if (\n        (new_position.row === finish_vertex_row &&\n          new_position.col === finish_vertex_col) ||\n        (new_position.row === start_vertex_row &&\n          new_position.col === start_vertex_col)\n      )\n        return;\n    }\n    // reassign the start or finish vertex depending on the vertex.isFinish \\\\ vertex.isStart\n    if (vertex.isStart) {\n      setStart(new_position);\n    } else {\n      setFinish(new_position);\n    }\n    setGrid(swapVertices(grid, vertex, new_position));\n    setGrid(updateGrid(grid));\n    clearTheVisualOfVertex();\n    event.dataTransfer.clearData();\n  };\n\n  const handleDrag = position => {\n    return;\n  };\n\n  const clearTheVisualOfVertex = () => {\n    for (let row = 0; row < ROWS; row++) {\n      for (let col = 0; col < COLUMNS; col++) {\n        let thisVertex = grid[row][col];\n        if (thisVertex.isStart)\n          document.getElementById(`vertex-${row}-${col}`).className =\n            \"vertex vertex-start\";\n        else if (thisVertex.isFinish)\n          document.getElementById(`vertex-${row}-${col}`).className =\n            \"vertex vertex-finish\";\n        else if (thisVertex.isWall)\n          document.getElementById(`vertex-${row}-${col}`).className =\n            \"vertex vertex-wall vertex-non-draggable\";\n        else {\n          document.getElementById(`vertex-${row}-${col}`).className = \"vertex \";\n        }\n      }\n    }\n  };\n\n  const handleMouseDown = position => {\n    const { row, col } = position;\n\n    if (!grid[row][col].isStart && !grid[row][col].isFinish) {\n      const wallGrid = createGridWithWalls(grid, position);\n      setGrid(wallGrid);\n      updateGrid(wallGrid);\n      setMouseIsPressed(true);\n      clearTheVisualOfVertex();\n    }\n  };\n\n  const handleMouseEnter = position => {\n    const { row, col } = position;\n    if (!mouseIsPressed) return;\n    if (!grid[row][col].isStart && !grid[row][col].isFinish) {\n      const wallGrid = createGridWithWalls(grid, position);\n      setGrid(wallGrid);\n      updateGrid(wallGrid);\n      clearTheVisualOfVertex();\n    }\n  };\n  const handleMouseUp = position => {\n    setMouseIsPressed(false);\n  };\n\n  const visualizeAlgorithm = () => {\n    document.getElementById(\"btnStart\").disabled = true;\n    document.getElementById(\"btnReset\").disabled = true;\n    for (let row = 0; row < ROWS; row++) {\n      for (let col = 0; col < COLUMNS; col++) {\n        let thisVertex = grid[row][col];\n\n        if (thisVertex.isStart)\n          document.getElementById(`vertex-${row}-${col}`).className =\n            \"vertex vertex-start\";\n        else if (thisVertex.isFinish)\n          document.getElementById(`vertex-${row}-${col}`).className =\n            \"vertex vertex-finish\";\n        else if (thisVertex.isWall)\n          document.getElementById(`vertex-${row}-${col}`).className =\n            \"vertex vertex-wall\";\n        else if (thisVertex.isVisited)\n          document.getElementById(`vertex-${row}-${col}`).className = \"vertex\";\n      }\n    }\n    const startVertex = grid[start_vertex_row][start_vertex_col];\n    const finishVertex = grid[finish_vertex_row][finish_vertex_col];\n    const visitedInOrder = dijkstra(grid, startVertex, finishVertex);\n    const backtrackedVertices = backtrackRoute(finishVertex, startVertex);\n    console.log(grid);\n    animateAlgorithm(visitedInOrder, backtrackedVertices);\n  };\n\n  return (\n    <>\n      <div>\n        {\" \"}\n        <button\n          id=\"btnStart\"\n          className=\"start\"\n          onClick={() => visualizeAlgorithm()}\n        >\n          Start\n        </button>\n        <button\n          id=\"btnReset\"\n          className=\"reset\"\n          onClick={() => resetGrid(grid, setGrid, start_finish)}\n        >\n          Reset Grid\n        </button>\n      </div>\n\n      <table className=\"grid\" draggable=\"false\">\n        <tbody className=\"grid\" draggable=\"false\">\n          {grid.map((row, row_index) => {\n            return (\n              <tr className=\"row\" key={row_index}>\n                {row.map((vertex, vertex_index) => {\n                  const {\n                    position,\n                    isFinish,\n                    isStart,\n                    isWall,\n                    isVisited,\n                    isPath,\n                    distance\n                  } = vertex;\n                  return (\n                    <Vertex\n                      key={vertex_index}\n                      position={position}\n                      isFinish={isFinish}\n                      isStart={isStart}\n                      onMouseDown={position => handleMouseDown(position)}\n                      onMouseEnter={position => handleMouseEnter(position)}\n                      onMouseUp={position => handleMouseUp(position)}\n                      onDragStart={e => handleDragStart(e, position, vertex)}\n                      onDragOver={event => handleDragOver(event, position)}\n                      onDrop={event => handleDrop(event, position)}\n                      onDrag={handleDrag}\n                      mouseIsPressed={mouseIsPressed}\n                      isWall={isWall}\n                      distance={distance}\n                      isVisited={isVisited}\n                      isPath={isPath}\n                      draggable={(isStart || isFinish) && !isWall}\n                    ></Vertex>\n                  );\n                })}\n              </tr>\n            );\n          })}\n        </tbody>\n      </table>\n    </>\n  );\n};\n\nexport default PathfinderVisualizer;\n","import { createInitialGrid } from \"../Initializers/GridInitializers\";\nimport { ROWS, COLUMNS } from \"../../parameters\";\n\nexport const resetGrid = (grid, setGrid, start_finish) => {\n  const resetGrid = createInitialGrid(start_finish);\n  setGrid(resetGrid);\n  for (let row = 0; row < ROWS; row++) {\n    for (let col = 0; col < COLUMNS; col++) {\n      let thisVertex = grid[row][col];\n      if (thisVertex.isStart)\n        document.getElementById(`vertex-${row}-${col}`).className =\n          \"vertex vertex-start\";\n      else if (thisVertex.isFinish)\n        document.getElementById(`vertex-${row}-${col}`).className =\n          \"vertex vertex-finish\";\n      else {\n        document.getElementById(`vertex-${row}-${col}`).className = \"vertex \";\n      }\n    }\n  }\n};\n","import React from \"react\";\nimport \"./App.css\";\nimport GridState from \"./context/grid/GridState\";\nimport PathfinderVisualizer from \"./PathfinderVisualizer/PathfinderVisualizer\";\n\nfunction App() {\n  return (\n    <GridState>\n      <div className=\"App\" draggable=\"false\">\n        <h1>Pathfinder visualization</h1>\n        <PathfinderVisualizer />\n      </div>\n    </GridState>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}